#!/usr/bin/env python3
"""
Interface Web para Gera√ß√£o de Relat√≥rios de M√≠dia

Aplica√ß√£o Flask que permite gerar relat√≥rios PDF atrav√©s de uma interface web.
"""

import os
import subprocess
import json
from datetime import datetime, timedelta
from functools import wraps
from flask import Flask, render_template, request, jsonify, send_file, flash, redirect, url_for, session
from database import DatabaseManager

app = Flask(__name__)
app.secret_key = 'Admin2025Studio@$Clipagem_SECRET_KEY_ULTRA_SECURE'  # Chave secreta para sess√µes

# Configura√ß√µes de login
LOGIN_USERNAME = 'admin'
LOGIN_PASSWORD = 'Admin2025Studio@$Clipagem'

def login_required(f):
    """Decorator para proteger rotas que precisam de autentica√ß√£o"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'logged_in' not in session or not session['logged_in']:
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/login', methods=['GET', 'POST'])
def login():
    """P√°gina de login"""
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        
        if username == LOGIN_USERNAME and password == LOGIN_PASSWORD:
            session['logged_in'] = True
            session['username'] = username
            flash('Login realizado com sucesso!', 'success')
            return redirect(url_for('index'))
        else:
            flash('Usu√°rio ou senha incorretos!', 'error')
    
    return render_template('login.html')

@app.route('/logout')
def logout():
    """Realiza logout do usu√°rio"""
    session.clear()
    flash('Logout realizado com sucesso!', 'success')
    return redirect(url_for('login'))

@app.route('/')
@login_required
def index():
    """P√°gina principal com formul√°rio de gera√ß√£o de relat√≥rios"""
    try:
        # Busca lista de clientes
        db = DatabaseManager()
        clientes = db.get_clientes()
        db.disconnect()
        
        # Define datas padr√£o (√∫ltimo m√™s)
        hoje = datetime.now()
        primeiro_dia_mes_atual = hoje.replace(day=1)
        ultimo_dia_mes_anterior = primeiro_dia_mes_atual - timedelta(days=1)
        primeiro_dia_mes_anterior = ultimo_dia_mes_anterior.replace(day=1)
        
        data_inicio_padrao = primeiro_dia_mes_anterior.strftime('%Y-%m-%d')
        data_fim_padrao = ultimo_dia_mes_anterior.strftime('%Y-%m-%d')
        
        return render_template('index.html', 
                             clientes=clientes,
                             data_inicio_padrao=data_inicio_padrao,
                             data_fim_padrao=data_fim_padrao)
    
    except Exception as e:
        flash(f'Erro ao carregar dados: {str(e)}', 'error')
        return render_template('index.html', clientes=[], 
                             data_inicio_padrao='', data_fim_padrao='')

@app.route('/gerar_relatorio', methods=['POST'])
@login_required
def gerar_relatorio():
    """Gera o relat√≥rio PDF baseado nos par√¢metros do formul√°rio"""
    try:
        print("üéØ Iniciando gera√ß√£o de relat√≥rio...")
        
        # Extrai dados do formul√°rio
        cliente_id = request.form.get('cliente_id')
        data_inicio = request.form.get('data_inicio')
        data_fim = request.form.get('data_fim')
        
        # NOVO: Extrai IDs das not√≠cias filtradas (priorit√°rio)
        ids_web = request.form.getlist('ids_web')
        ids_impresso = request.form.getlist('ids_impresso')
        ids_tv = request.form.getlist('ids_tv')
        ids_radio = request.form.getlist('ids_radio')
        
        # Converte para int
        try:
            ids_web = [int(id_) for id_ in ids_web if id_]
            ids_impresso = [int(id_) for id_ in ids_impresso if id_]
            ids_tv = [int(id_) for id_ in ids_tv if id_]
            ids_radio = [int(id_) for id_ in ids_radio if id_]
        except ValueError:
            print("‚ùå Erro ao converter IDs das not√≠cias")
            ids_web = ids_impresso = ids_tv = ids_radio = []
        
        # Verifica se h√° IDs espec√≠ficos (modo priorit√°rio)
        usar_ids_especificos = any([ids_web, ids_impresso, ids_tv, ids_radio])
        
        # Extrai filtros opcionais (para compatibilidade ou quando n√£o h√° IDs espec√≠ficos)
        tipos_midia = request.form.getlist('tipos_midia') or ['web', 'tv', 'radio', 'impresso']
        status_filtros = request.form.getlist('status') or ['positivo', 'negativo', 'neutro']
        retorno_filtro = request.form.get('retorno') or 'com_retorno'  # Radio button retorna apenas um valor
        areas_filtros = request.form.getlist('areas') or []
        
        # NOVO: Extrai flag de mostrar retorno de m√≠dia no relat√≥rio
        mostrar_retorno_relatorio = request.form.get('mostrar_retorno_relatorio', 'true').lower() == 'true'
        
        # Converte √°reas para int
        if areas_filtros:
            try:
                areas_filtros = [int(area) for area in areas_filtros]
            except ValueError:
                areas_filtros = []
        
        # Verifica se o cliente tem permiss√£o para ver retorno de m√≠dia
        print("üîç Verificando permiss√£o de retorno de m√≠dia do cliente...")
        db_temp = DatabaseManager()
        cliente_config = db_temp.get_cliente_configuracoes(cliente_id)
        tem_permissao_retorno = cliente_config.get('fl_retorno_midia', False) if cliente_config else False
        db_temp.disconnect()
        
        print(f"üîê Cliente {cliente_id} - Permiss√£o retorno m√≠dia: {tem_permissao_retorno}")
        print(f"üéØ Usu√°rio quer mostrar retorno no relat√≥rio: {mostrar_retorno_relatorio}")
        
        # Se o cliente n√£o tem permiss√£o, for√ßa mostrar_retorno_relatorio = False
        if not tem_permissao_retorno:
            mostrar_retorno_relatorio = False
            print("‚ö†Ô∏è Cliente sem permiss√£o - for√ßando mostrar_retorno_relatorio = False")
        
        filtros = {
            'tipos_midia': tipos_midia,
            'status': status_filtros,
            'retorno': [retorno_filtro],  # Converte para lista para manter compatibilidade
            'areas': areas_filtros,
            'mostrar_retorno_relatorio': mostrar_retorno_relatorio,  # NOVO: controla se mostra se√ß√µes de retorno
            'tem_permissao_retorno': tem_permissao_retorno  # NOVO: indica se o cliente tem permiss√£o
        }
        
        # Adiciona IDs espec√≠ficos ao filtro
        if usar_ids_especificos:
            filtros['ids_especificos'] = {
                'web': ids_web,
                'impresso': ids_impresso,
                'tv': ids_tv,
                'radio': ids_radio
            }
        
        print(f"üìä Par√¢metros: Cliente={cliente_id}, In√≠cio={data_inicio}, Fim={data_fim}")
        print(f"üîç Filtros: {filtros}")
        if usar_ids_especificos:
            print(f"üéØ IDs espec√≠ficos: Web={len(ids_web)}, Impresso={len(ids_impresso)}, TV={len(ids_tv)}, R√°dio={len(ids_radio)}")
            print(f"üìã Total de not√≠cias: {len(ids_web) + len(ids_impresso) + len(ids_tv) + len(ids_radio)}")
        
        # Valida√ß√µes
        if not cliente_id or not data_inicio or not data_fim:
            print("‚ùå Campos obrigat√≥rios faltando")
            flash('Todos os campos s√£o obrigat√≥rios', 'error')
            return redirect(url_for('index'))
        
        # Converte para int
        try:
            cliente_id = int(cliente_id)
        except ValueError:
            print("‚ùå ID do cliente inv√°lido")
            flash('ID do cliente deve ser um n√∫mero v√°lido', 'error')
            return redirect(url_for('index'))
        
        # Verifica se as datas s√£o v√°lidas
        try:
            datetime.strptime(data_inicio, '%Y-%m-%d')
            datetime.strptime(data_fim, '%Y-%m-%d')
        except ValueError:
            print("‚ùå Formato de data inv√°lido")
            flash('Formato de data inv√°lido', 'error')
            return redirect(url_for('index'))
        
        # Verifica se o cliente existe
        print("üîç Verificando se cliente existe...")
        db = DatabaseManager()
        if not db.check_cliente(cliente_id):
            db.disconnect()
            print("‚ùå Cliente n√£o encontrado")
            flash('Cliente n√£o encontrado no banco de dados', 'error')
            return redirect(url_for('index'))
        db.disconnect()
        print("‚úÖ Cliente validado")
        
        # Gera nome do arquivo (mesmo padr√£o do main.py)
        data_inicio_clean = data_inicio.replace('-', '')
        data_fim_clean = data_fim.replace('-', '')
        nome_arquivo = f"relatorio_{cliente_id}_{data_inicio_clean}_{data_fim_clean}.pdf"
        
        print(f"üìÅ Nome do arquivo: {nome_arquivo}")
        
        # Executa o script main.py
        import json
        filtros_json = json.dumps(filtros)
        
        comando = [
            'python', 'main.py',
            '--cliente', str(cliente_id),
            '--data_inicio', data_inicio,
            '--data_fim', data_fim,
            '--output', nome_arquivo,
            '--filtros', filtros_json
        ]
        
        print(f"üöÄ Executando comando: {' '.join(comando)}")
        resultado = subprocess.run(comando, capture_output=True, text=True, cwd=os.getcwd())
        
        print(f"üì§ C√≥digo de retorno: {resultado.returncode}")
        if resultado.stdout:
            print(f"üìù STDOUT: {resultado.stdout[:200]}...")
        if resultado.stderr:
            print(f"‚ùå STDERR: {resultado.stderr[:200]}...")
        
        if resultado.returncode == 0:
            caminho_arquivo = os.path.join('./output', nome_arquivo)
            print(f"üîç Verificando arquivo em: {caminho_arquivo}")
            
            if os.path.exists(caminho_arquivo):
                print("‚úÖ Arquivo encontrado! Iniciando download...")
                flash('Relat√≥rio gerado com sucesso!', 'success')
                
                # Cria resposta com o arquivo
                response = send_file(caminho_arquivo, as_attachment=True, 
                                   download_name=nome_arquivo)
                
                # Define cookie para indicar que o download foi conclu√≠do
                import uuid
                download_token = str(uuid.uuid4())
                response.set_cookie('download_token', download_token, max_age=60)  # Expira em 1 minuto
                response.set_cookie('download_status', 'complete', max_age=60)
                
                return response
            else:
                print("‚ùå Arquivo n√£o encontrado ap√≥s gera√ß√£o")
                print(f"üìÅ Verificando arquivos existentes...")
                try:
                    arquivos = os.listdir('./output')
                    print(f"üìÇ Arquivos no output: {arquivos}")
                    # Procura por arquivo similar
                    for arquivo in arquivos:
                        if f"relatorio_{cliente_id}_" in arquivo and arquivo.endswith('.pdf'):
                            caminho_alternativo = os.path.join('./output', arquivo)
                            print(f"‚úÖ Arquivo alternativo encontrado: {arquivo}")
                            flash('Relat√≥rio gerado com sucesso!', 'success')
                            
                            # Cria resposta com o arquivo alternativo
                            response = send_file(caminho_alternativo, as_attachment=True, 
                                               download_name=arquivo)
                            
                            # Define cookie para indicar que o download foi conclu√≠do
                            import uuid
                            download_token = str(uuid.uuid4())
                            response.set_cookie('download_token', download_token, max_age=60)
                            response.set_cookie('download_status', 'complete', max_age=60)
                            
                            return response
                except Exception as e:
                    print(f"‚ùå Erro ao listar arquivos: {e}")
                
                flash('Erro: Arquivo PDF n√£o foi encontrado ap√≥s gera√ß√£o', 'error')
                return redirect(url_for('index'))
        else:
            erro_msg = resultado.stderr if resultado.stderr else 'Erro desconhecido'
            print(f"‚ùå Erro na execu√ß√£o: {erro_msg}")
            flash(f'Erro ao gerar relat√≥rio: {erro_msg}', 'error')
            return redirect(url_for('index'))
    
    except Exception as e:
        print(f"üí• Exce√ß√£o n√£o tratada: {str(e)}")
        import traceback
        traceback.print_exc()
        flash(f'Erro interno: {str(e)}', 'error')
        return redirect(url_for('index'))

@app.route('/api/clientes')
@login_required
def api_clientes():
    """API endpoint para buscar lista de clientes"""
    try:
        db = DatabaseManager()
        clientes = db.get_clientes()
        db.disconnect()
        return jsonify(clientes)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/validar_cliente/<int:cliente_id>')
@login_required
def api_validar_cliente(cliente_id):
    """API endpoint para validar se um cliente existe"""
    try:
        db = DatabaseManager()
        existe = db.check_cliente(cliente_id)
        db.disconnect()
        return jsonify({'existe': existe})
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/api/areas/<int:cliente_id>')
@login_required
def api_areas_cliente(cliente_id):
    """API endpoint para buscar √°reas de um cliente"""
    try:
        db = DatabaseManager()
        areas = db.get_areas_by_cliente(cliente_id)
        db.disconnect()
        return jsonify(areas)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/status')
@login_required
def status():
    """P√°gina de status do sistema"""
    try:
        # Testa conex√£o com banco
        db = DatabaseManager()
        conexao_ok = db.connect()
        if conexao_ok:
            clientes = db.get_clientes()
            total_clientes = len(clientes)
            db.disconnect()
        else:
            total_clientes = 0
        
        # Verifica se diret√≥rio de output existe
        output_dir_exists = os.path.exists('./output')
        
        # Lista arquivos recentes no output
        arquivos_recentes = []
        if output_dir_exists:
            try:
                arquivos = os.listdir('./output')
                arquivos_pdf = [f for f in arquivos if f.endswith('.pdf')]
                arquivos_pdf.sort(key=lambda x: os.path.getmtime(os.path.join('./output', x)), reverse=True)
                arquivos_recentes = arquivos_pdf[:5]  # √öltimos 5 arquivos
            except:
                pass
        
        return render_template('status.html',
                             conexao_db=conexao_ok,
                             total_clientes=total_clientes,
                             output_dir_exists=output_dir_exists,
                             arquivos_recentes=arquivos_recentes)
    
    except Exception as e:
        return render_template('status.html',
                             conexao_db=False,
                             total_clientes=0,
                             output_dir_exists=False,
                             arquivos_recentes=[],
                             error=str(e))

@app.route('/check_download_status')
@login_required
def check_download_status():
    """Endpoint para verificar se um download foi conclu√≠do"""
    download_status = request.cookies.get('download_status')
    if download_status == 'complete':
        return jsonify({'status': 'complete'})
    else:
        return jsonify({'status': 'pending'})

@app.route('/listar_noticias', methods=['POST'])
@login_required
def listar_noticias():
    """Lista todas as not√≠cias do per√≠odo separadas por tipo de m√≠dia com filtros aplicados"""
    try:
        print("üéØ Iniciando listagem de not√≠cias...")
        
        # Extrai dados do formul√°rio
        cliente_id = request.form.get('cliente_id')
        data_inicio = request.form.get('data_inicio')
        data_fim = request.form.get('data_fim')
        
        # Extrai filtros avan√ßados
        tipos_midia = request.form.getlist('tipos_midia') or ['web', 'tv', 'radio', 'impresso']
        status_filtros = request.form.getlist('status') or ['positivo', 'negativo', 'neutro']
        retorno_filtro = request.form.get('retorno') or 'com_retorno'  # Radio button retorna apenas um valor
        valor_filtros = request.form.getlist('valor') or ['com_valor', 'sem_valor']  # Checkbox values
        areas_filtros = request.form.getlist('areas') or []
        
        # Converte √°reas para int
        if areas_filtros:
            try:
                areas_filtros = [int(area) for area in areas_filtros]
            except ValueError:
                areas_filtros = []
        
        # Verifica se o cliente tem permiss√£o para ver retorno de m√≠dia
        print("üîç Verificando permiss√£o de retorno de m√≠dia do cliente...")
        db_temp = DatabaseManager()
        cliente_config = db_temp.get_cliente_configuracoes(cliente_id)
        tem_permissao_retorno = cliente_config.get('fl_retorno_midia', False) if cliente_config else False
        db_temp.disconnect()
        
        print(f"üîê Cliente {cliente_id} - Permiss√£o retorno m√≠dia: {tem_permissao_retorno}")
        
        # Monta objeto de filtros
        filtros = {
            'tipos_midia': tipos_midia,
            'status': status_filtros,
            'retorno': [retorno_filtro],  # Converte para lista para manter compatibilidade
            'valor': valor_filtros,
            'areas': areas_filtros,
            'tem_permissao_retorno': tem_permissao_retorno  # NOVO: indica se o cliente tem permiss√£o
        }
        
        print(f"üìä Par√¢metros: Cliente={cliente_id}, In√≠cio={data_inicio}, Fim={data_fim}")
        print(f"üîç Filtros aplicados: {filtros}")
        
        # Valida√ß√µes
        if not cliente_id or not data_inicio or not data_fim:
            print("‚ùå Campos obrigat√≥rios faltando")
            return jsonify({
                'success': False,
                'message': 'Todos os campos s√£o obrigat√≥rios'
            }), 400
        
        # Converte para int
        try:
            cliente_id = int(cliente_id)
        except ValueError:
            print("‚ùå ID do cliente inv√°lido")
            return jsonify({
                'success': False,
                'message': 'ID do cliente deve ser um n√∫mero v√°lido'
            }), 400
        
        # Verifica se as datas s√£o v√°lidas
        try:
            from datetime import datetime
            datetime.strptime(data_inicio, '%Y-%m-%d')
            datetime.strptime(data_fim, '%Y-%m-%d')
        except ValueError:
            print("‚ùå Formato de data inv√°lido")
            return jsonify({
                'success': False,
                'message': 'Formato de data inv√°lido'
            }), 400
        
        # Verifica se o cliente existe
        print("üîç Verificando se cliente existe...")
        db = DatabaseManager()
        if not db.check_cliente(cliente_id):
            db.disconnect()
            print("‚ùå Cliente n√£o encontrado")
            return jsonify({
                'success': False,
                'message': 'Cliente n√£o encontrado no banco de dados'
            }), 404
        
        # Lista as not√≠cias com filtros aplicados
        print("üìã Listando not√≠cias com filtros...")
        noticias = db.listar_noticias_por_periodo_com_filtros(cliente_id, data_inicio, data_fim, filtros)
        db.disconnect()
        
        print("‚úÖ Not√≠cias listadas com sucesso")
        
        # Garante que a resposta seja JSON v√°lido
        response = jsonify({
            'success': True,
            'message': 'Not√≠cias listadas com sucesso',
            'noticias': noticias,
            'filtros_aplicados': filtros
        })
        response.headers['Content-Type'] = 'application/json; charset=utf-8'
        return response
    
    except Exception as e:
        print(f"üí• Erro na listagem: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }), 500

@app.route('/adicionar_noticia', methods=['POST'])
@login_required
def adicionar_noticia():
    """Adiciona uma nova not√≠cia ao banco de dados"""
    try:
        print("üéØ Iniciando adi√ß√£o de not√≠cia...")
        
        # Extrai dados do formul√°rio
        dados_noticia = {
            'tipo': request.form.get('tipo'),
            'cliente_id': request.form.get('cliente_id'),
            'data': request.form.get('data'),
            'titulo': request.form.get('titulo'),
            'veiculo': request.form.get('veiculo'),
            'texto': request.form.get('texto'),
            'valor': request.form.get('valor', 0),
            'tags': request.form.get('tags', '')  # Adiciona suporte para tags
        }
        
        # Campos espec√≠ficos por tipo de m√≠dia
        if dados_noticia['tipo'] == 'WEB':
            dados_noticia['link'] = request.form.get('link', '')
        elif dados_noticia['tipo'] == 'TV':
            dados_noticia['programa'] = request.form.get('programa', '')
            dados_noticia['horario'] = request.form.get('horario', '')
        elif dados_noticia['tipo'] == 'RADIO':
            dados_noticia['programa_radio'] = request.form.get('programa_radio', '')
            dados_noticia['horario_radio'] = request.form.get('horario_radio', '')
        
        print(f"üìä Dados da not√≠cia: {dados_noticia['tipo']} - {dados_noticia['titulo']}")
        if dados_noticia['tags']:
            print(f"üè∑Ô∏è Tags: {dados_noticia['tags']}")
        
        # Adiciona a not√≠cia
        db = DatabaseManager()
        resultado = db.adicionar_noticia(dados_noticia)
        db.disconnect()
        
        if resultado['success']:
            print("‚úÖ Not√≠cia adicionada com sucesso")
            return jsonify(resultado)
        else:
            print(f"‚ùå Erro ao adicionar not√≠cia: {resultado['message']}")
            return jsonify(resultado), 400
    
    except Exception as e:
        print(f"üí• Erro na adi√ß√£o: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }), 500

@app.route('/editar_noticia', methods=['POST'])
@login_required
def editar_noticia():
    """Edita uma not√≠cia existente no banco de dados"""
    try:
        print("üéØ Iniciando edi√ß√£o de not√≠cia...")
        print(f"üîç Content-Type da requisi√ß√£o: {request.content_type}")
        print(f"üîç M√©todo da requisi√ß√£o: {request.method}")
        print(f"üîç Headers da requisi√ß√£o: {dict(request.headers)}")
        
        # Debug: Mostra todos os dados recebidos
        print(f"üîç Form data keys: {list(request.form.keys())}")
        print(f"üîç Files keys: {list(request.files.keys())}")
        
        # Extrai dados do formul√°rio
        noticia_id = request.form.get('noticia_id')
        print(f"üîç noticia_id extra√≠do: {noticia_id}")
        
        # Valida√ß√£o do ID da not√≠cia
        if not noticia_id:
            print("‚ùå ID da not√≠cia n√£o fornecido")
            return jsonify({
                'success': False,
                'message': 'ID da not√≠cia √© obrigat√≥rio'
            }), 400
        
        try:
            noticia_id = int(noticia_id)
            print(f"‚úÖ noticia_id convertido para int: {noticia_id}")
        except ValueError as ve:
            print(f"‚ùå ID da not√≠cia inv√°lido - Erro: {str(ve)}")
            return jsonify({
                'success': False,
                'message': f'ID da not√≠cia deve ser um n√∫mero v√°lido. Recebido: {noticia_id}'
            }), 400
        
        # Extrai dados do formul√°rio com debug
        try:
            dados_noticia = {
                'tipo': request.form.get('tipo'),
                'cliente_id': request.form.get('cliente_id'),
                'data': request.form.get('data'),
                'titulo': request.form.get('titulo'),
                'veiculo': request.form.get('veiculo'),
                'texto': request.form.get('texto'),
                'valor': request.form.get('valor', 0),
                'tags': request.form.get('tags', '')  # Adiciona suporte para tags
            }
            print(f"‚úÖ Dados do formul√°rio extra√≠dos com sucesso")
            print(f"üîç Tipo: {dados_noticia['tipo']}")
            print(f"üîç Cliente ID: {dados_noticia['cliente_id']}")
            print(f"üîç Titulo: {dados_noticia['titulo']}")
            print(f"üîç Valor: {dados_noticia['valor']}")
        except Exception as form_error:
            print(f"‚ùå Erro ao extrair dados do formul√°rio: {str(form_error)}")
            return jsonify({
                'success': False,
                'message': f'Erro ao processar dados do formul√°rio: {str(form_error)}'
            }), 400
        
        # Campos espec√≠ficos por tipo de m√≠dia
        if dados_noticia['tipo'] == 'WEB':
            dados_noticia['link'] = request.form.get('link', '')
        elif dados_noticia['tipo'] == 'TV':
            dados_noticia['programa'] = request.form.get('programa', '')
            dados_noticia['horario'] = request.form.get('horario', '')
        elif dados_noticia['tipo'] == 'RADIO':
            dados_noticia['programa_radio'] = request.form.get('programa_radio', '')
            dados_noticia['horario_radio'] = request.form.get('horario_radio', '')
            # Tamb√©m aceita os campos sem o sufixo _radio para compatibilidade
            if not dados_noticia['programa_radio']:
                dados_noticia['programa_radio'] = request.form.get('programa', '')
            if not dados_noticia['horario_radio']:
                dados_noticia['horario_radio'] = request.form.get('horario', '')
        
        print(f"üìä Dados da not√≠cia para edi√ß√£o: {dados_noticia['tipo']} - {dados_noticia['titulo']}")
        print(f"üîç ID da not√≠cia: {noticia_id}")
        if dados_noticia['tags']:
            print(f"üè∑Ô∏è Tags: {dados_noticia['tags']}")
        
        # Valida√ß√µes b√°sicas
        print(f"üîç Validando campos obrigat√≥rios:")
        print(f"   - Tipo: '{dados_noticia['tipo']}' (v√°lido: {bool(dados_noticia['tipo'])})")
        print(f"   - T√≠tulo: '{dados_noticia['titulo']}' (v√°lido: {bool(dados_noticia['titulo'])})")
        print(f"   - Ve√≠culo: '{dados_noticia['veiculo']}' (v√°lido: {bool(dados_noticia['veiculo'])})")
        print(f"   - Data: '{dados_noticia['data']}' (v√°lido: {bool(dados_noticia['data'])})")
        
        if not dados_noticia['tipo'] or not dados_noticia['titulo'] or not dados_noticia['veiculo'] or not dados_noticia['data']:
            campos_faltando = []
            if not dados_noticia['tipo']: campos_faltando.append('tipo')
            if not dados_noticia['titulo']: campos_faltando.append('t√≠tulo')
            if not dados_noticia['veiculo']: campos_faltando.append('ve√≠culo')
            if not dados_noticia['data']: campos_faltando.append('data')
            
            print(f"‚ùå Campos obrigat√≥rios faltando: {', '.join(campos_faltando)}")
            return jsonify({
                'success': False,
                'message': f'Campos obrigat√≥rios n√£o preenchidos: {", ".join(campos_faltando)}'
            }), 400
        
        # Processa upload de imagem para not√≠cias impressas e web
        upload_status = None
        print(f"üîç Verificando upload de imagem - Tipo: {dados_noticia['tipo']}")
        print(f"üîç Arquivos recebidos: {list(request.files.keys())}")
        
        if dados_noticia['tipo'] in ['JORNAL', 'WEB'] and 'upload_imagem' in request.files:
            upload_file = request.files['upload_imagem']
            print(f"üì∑ Arquivo de upload encontrado: {upload_file}")
            print(f"üì∑ Filename: {upload_file.filename}")
            print(f"üì∑ Content-Type: {upload_file.content_type}")
            
            if upload_file and upload_file.filename:
                print(f"üì∑ Processando upload de imagem: {upload_file.filename}")
                
                try:
                    # Valida√ß√µes do arquivo
                    allowed_extensions = ['jpg', 'jpeg', 'png']
                    file_ext = upload_file.filename.lower().split('.')[-1]
                    print(f"üì∑ Extens√£o do arquivo: {file_ext}")
                    
                    if file_ext not in allowed_extensions:
                        print(f"‚ùå Extens√£o n√£o suportada: {file_ext}")
                        return jsonify({
                            'success': False,
                            'message': f'Formato de arquivo n√£o suportado. Use: {", ".join(allowed_extensions)}'
                        }), 400
                    
                    # Valida√ß√£o do tamanho (5MB)
                    print("üìè Validando tamanho do arquivo...")
                    upload_file.seek(0, 2)  # Vai para o final do arquivo
                    file_size = upload_file.tell()  # Pega o tamanho
                    upload_file.seek(0)  # Volta para o in√≠cio
                    print(f"üìè Tamanho do arquivo: {file_size / 1024 / 1024:.2f}MB")
                    
                    if file_size > 5 * 1024 * 1024:
                        print(f"‚ùå Arquivo muito grande: {file_size / 1024 / 1024:.2f}MB")
                        return jsonify({
                            'success': False,
                            'message': f'Arquivo muito grande. Tamanho: {file_size / 1024 / 1024:.2f}MB. M√°ximo: 5MB'
                        }), 400
                        
                except Exception as validation_error:
                    print(f"‚ùå Erro na valida√ß√£o do arquivo: {str(validation_error)}")
                    return jsonify({
                        'success': False,
                        'message': f'Erro na valida√ß√£o do arquivo: {str(validation_error)}'
                    }), 400
                
                # Determina o Content-Type baseado na extens√£o
                content_type_map = {
                    'jpg': 'image/jpeg',
                    'jpeg': 'image/jpeg', 
                    'png': 'image/png'
                }
                content_type = content_type_map.get(file_ext, 'image/jpeg')
                
                try:
                    print("üîß Iniciando configura√ß√£o S3...")
                    # Configura√ß√£o S3
                    import boto3
                    s3_client = boto3.client(
                        's3',
                        aws_access_key_id='AKIAXH7FCUIUMZ7NFM5Q',
                        aws_secret_access_key='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',
                        region_name='us-east-1'
                    )
                    print("‚úÖ Cliente S3 configurado com sucesso")
                    
                    bucket_name = 'docmidia-files'
                    
                    # Define o caminho S3 baseado no tipo de m√≠dia
                    if dados_noticia['tipo'] == 'WEB':
                        s3_key = f"backup_studioclipagemco/public_html/fmanager/clipagem/web/arquivo{noticia_id}_1.jpeg"
                    else:  # JORNAL
                        s3_key = f"backup_studioclipagemco/public_html/fmanager/clipagem/jornal/arquivo{noticia_id}_1.jpeg"
                    
                    print(f"üì§ Fazendo upload para S3:")
                    print(f"   - Bucket: {bucket_name}")
                    print(f"   - Key: {s3_key}")
                    print(f"   - Content-Type: {content_type}")
                    print(f"   - Posi√ß√£o do arquivo: {upload_file.tell()}")
                    
                    # Upload para S3
                    s3_client.upload_fileobj(
                        upload_file,
                        bucket_name,
                        s3_key,
                        ExtraArgs={
                            'ContentType': content_type
                        }
                    )
                    
                    upload_status = {
                        'success': True,
                        'message': 'Imagem enviada com sucesso para o S3',
                        's3_path': s3_key
                    }
                    print(f"‚úÖ Upload conclu√≠do: {s3_key}")
                    
                except Exception as upload_error:
                    print(f"‚ùå Erro no upload S3: {str(upload_error)}")
                    print(f"‚ùå Tipo do erro: {type(upload_error).__name__}")
                    import traceback
                    traceback.print_exc()
                    upload_status = {
                        'success': False,
                        'message': f'Erro ao enviar imagem: {str(upload_error)}'
                    }
                    # Continua com a edi√ß√£o da not√≠cia mesmo se o upload falhar
        
        # Edita a not√≠cia
        print("üíæ Iniciando edi√ß√£o no banco de dados...")
        try:
            db = DatabaseManager()
            print("‚úÖ Conex√£o com banco estabelecida")
            
            resultado = db.editar_noticia(noticia_id, dados_noticia)
            print(f"üìä Resultado da edi√ß√£o: {resultado}")
            
            db.disconnect()
            print("‚úÖ Conex√£o com banco encerrada")
            
            if resultado['success']:
                print("‚úÖ Not√≠cia editada com sucesso")
                
                # Adiciona informa√ß√µes do upload se houve
                if upload_status:
                    resultado['upload_status'] = upload_status
                    if upload_status['success']:
                        resultado['message'] += f" | Imagem enviada para S3"
                    else:
                        resultado['message'] += f" | Aviso: {upload_status['message']}"
                
                return jsonify(resultado)
            else:
                print(f"‚ùå Erro ao editar not√≠cia: {resultado['message']}")
                return jsonify(resultado), 400
                
        except Exception as db_error:
            print(f"‚ùå Erro na opera√ß√£o do banco: {str(db_error)}")
            print(f"‚ùå Tipo do erro: {type(db_error).__name__}")
            import traceback
            traceback.print_exc()
            return jsonify({
                'success': False,
                'message': f'Erro na opera√ß√£o do banco: {str(db_error)}'
            }), 500
    
    except Exception as e:
        print(f"üí• Erro na edi√ß√£o: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }), 500

@app.route('/excluir_noticia', methods=['POST'])
@login_required
def excluir_noticia():
    """Exclui uma not√≠cia PERMANENTEMENTE do banco de dados"""
    db = None
    
    try:
        print("üéØ Iniciando exclus√£o PERMANENTE de not√≠cia...")
        
        # Verifica se o request tem dados JSON
        if not request.is_json:
            print("‚ùå Request n√£o √© JSON")
            return jsonify({
                'success': False,
                'message': 'Requisi√ß√£o deve ser JSON'
            }), 400
        
        # Extrai dados do JSON
        data = request.get_json()
        if not data:
            print("‚ùå Dados JSON vazios")
            return jsonify({
                'success': False,
                'message': 'Dados JSON n√£o fornecidos'
            }), 400
        
        vinculo_id = data.get('vinculo_id')
        
        if not vinculo_id:
            print("‚ùå ID do v√≠nculo n√£o fornecido")
            return jsonify({
                'success': False,
                'message': 'ID do v√≠nculo √© obrigat√≥rio para exclus√£o'
            }), 400
        
        try:
            vinculo_id = int(vinculo_id)
            if vinculo_id <= 0:
                raise ValueError("ID deve ser positivo")
        except ValueError as ve:
            print(f"‚ùå ID do v√≠nculo inv√°lido: {ve}")
            return jsonify({
                'success': False,
                'message': 'ID do v√≠nculo deve ser um n√∫mero v√°lido e positivo'
            }), 400
        
        print(f"üóëÔ∏è Excluindo v√≠nculo ID: {vinculo_id}")
        
        # Cria inst√¢ncia √∫nica do DB para toda a opera√ß√£o
        try:
            db = DatabaseManager()
            # Tenta conectar explicitamente
            if not db.connect():
                raise Exception("Falha ao conectar com o banco de dados")
        except Exception as db_error:
            print(f"‚ùå Erro ao conectar com o banco: {db_error}")
            return jsonify({
                'success': False,
                'message': 'Erro de conex√£o com o banco de dados'
            }), 500
        
        # Tenta excluir o v√≠nculo
        try:
            print(f"üîç Tentando excluir v√≠nculo ID {vinculo_id}...")
            resultado_final = db.excluir_noticia(vinculo_id)
            
            if not resultado_final['success']:
                print(f"‚ùå Falha ao excluir v√≠nculo: {resultado_final.get('message', 'Erro desconhecido')}")
                
        except Exception as table_error:
            print(f"‚ùå Erro ao excluir v√≠nculo: {table_error}")
            resultado_final = {'success': False, 'message': str(table_error)}
        
        # Fecha conex√£o imediatamente
        try:
            db.disconnect()
            print("üîå Conex√£o DB fechada ap√≥s opera√ß√£o")
        except Exception as close_error:
            print(f"‚ö†Ô∏è Erro ao fechar conex√£o: {close_error}")
        
        if resultado_final and resultado_final['success']:
            noticia_info = resultado_final.get('noticia_info', {})
            print(f"‚úÖ V√≠nculo EXCLU√çDO: ID {noticia_info.get('vinculo_id', 'N/A')}")
            
            # Log da exclus√£o para auditoria
            print(f"üìã AUDITORIA - Exclus√£o de v√≠nculo:")
            print(f"   - V√≠nculo ID: {noticia_info.get('vinculo_id', 'N/A')}")
            print(f"   - Not√≠cia ID: {noticia_info.get('noticia_id', 'N/A')}")
            print(f"   - Cliente ID: {noticia_info.get('cliente_id', 'N/A')}")
            print(f"   - Tipo: {noticia_info.get('tipo_midia', 'N/A')}")
            print(f"   - Linhas afetadas: {noticia_info.get('rows_affected', 0)}")
            
            return jsonify({
                'success': True,
                'message': resultado_final['message'],
                'noticia_excluida': noticia_info
            })
        else:
            print("‚ùå V√≠nculo n√£o encontrado ou falha na exclus√£o")
            erro_msg = resultado_final.get('message', 'Erro desconhecido') if resultado_final else 'Erro desconhecido'
            return jsonify({
                'success': False,
                'message': f'V√≠nculo n√£o encontrado ou j√° foi exclu√≠do: {erro_msg}'
            }), 404
    
    except Exception as e:
        print(f"üí• Erro cr√≠tico na exclus√£o do v√≠nculo: {str(e)}")
        print(f"üí• Tipo do erro: {type(e).__name__}")
        print(f"üí• Dados recebidos: {locals()}")
        import traceback
        traceback.print_exc()
        
        # Log mais detalhado do erro
        import sys
        exc_type, exc_value, exc_traceback = sys.exc_info()
        print(f"üí• Linha do erro: {exc_traceback.tb_lineno}")
        
        return jsonify({
            'success': False,
            'message': f'Erro interno do servidor: {str(e)}',
            'error_type': type(e).__name__,
            'error_line': exc_traceback.tb_lineno if exc_traceback else 'N/A'
        }), 500
    
    finally:
        # Garante que a conex√£o seja fechada
        if db:
            try:
                db.disconnect()
                print("üîå Conex√£o DB fechada no finally")
            except Exception as close_error:
                print(f"‚ö†Ô∏è Erro ao fechar conex√£o: {close_error}")

@app.route('/upload_imagem', methods=['POST'])
@login_required
def upload_imagem():
    """Upload dedicado de imagem para S3"""
    try:
        print("üéØ Iniciando upload dedicado de imagem...")
        print(f"üîç Content-Type da requisi√ß√£o: {request.content_type}")
        print(f"üîç Form data keys: {list(request.form.keys())}")
        print(f"üîç Files keys: {list(request.files.keys())}")
        
        # Extrai dados do formul√°rio
        noticia_id = request.form.get('noticia_id')
        cliente_id = request.form.get('cliente_id')
        tipo_midia = request.form.get('tipo_midia')
        
        print(f"üîç Dados extra√≠dos - Not√≠cia: {noticia_id}, Cliente: {cliente_id}, Tipo: {tipo_midia}")
        
        # Valida√ß√µes b√°sicas
        if not noticia_id or not cliente_id or not tipo_midia:
            print("‚ùå Campos obrigat√≥rios faltando")
            print(f"   - noticia_id: '{noticia_id}' (presente: {bool(noticia_id)})")
            print(f"   - cliente_id: '{cliente_id}' (presente: {bool(cliente_id)})")
            print(f"   - tipo_midia: '{tipo_midia}' (presente: {bool(tipo_midia)})")
            return jsonify({
                'success': False,
                'message': 'Campos obrigat√≥rios: noticia_id, cliente_id, tipo_midia'
            }), 400
        
        if tipo_midia not in ['WEB', 'JORNAL']:
            print(f"‚ùå Tipo de m√≠dia n√£o suportado: {tipo_midia}")
            return jsonify({
                'success': False,
                'message': 'Upload de imagem dispon√≠vel apenas para WEB e JORNAL'
            }), 400
        
        # Verifica se h√° arquivo
        if 'imagem' not in request.files:
            print("‚ùå Arquivo de imagem n√£o encontrado")
            return jsonify({
                'success': False,
                'message': 'Arquivo de imagem n√£o encontrado na requisi√ß√£o'
            }), 400
        
        upload_file = request.files['imagem']
        print(f"üì∑ Arquivo recebido: {upload_file.filename}")
        print(f"üì∑ Content-Type: {upload_file.content_type}")
        
        if not upload_file or not upload_file.filename:
            print("‚ùå Arquivo vazio ou sem nome")
            return jsonify({
                'success': False,
                'message': 'Arquivo de imagem inv√°lido'
            }), 400
        
        try:
            noticia_id = int(noticia_id)
            cliente_id = int(cliente_id)
        except ValueError:
            print("‚ùå IDs inv√°lidos")
            return jsonify({
                'success': False,
                'message': 'IDs da not√≠cia e cliente devem ser n√∫meros v√°lidos'
            }), 400
        
        print(f"üì∑ Processando upload de imagem: {upload_file.filename}")
        
        try:
            # Valida√ß√µes do arquivo
            allowed_extensions = ['jpg', 'jpeg', 'png']
            file_ext = upload_file.filename.lower().split('.')[-1]
            print(f"üì∑ Extens√£o do arquivo: {file_ext}")
            
            if file_ext not in allowed_extensions:
                print(f"‚ùå Extens√£o n√£o suportada: {file_ext}")
                return jsonify({
                    'success': False,
                    'message': f'Formato de arquivo n√£o suportado. Use: {", ".join(allowed_extensions)}'
                }), 400
            
            # Valida√ß√£o do tamanho (5MB)
            print("üìè Validando tamanho do arquivo...")
            upload_file.seek(0, 2)  # Vai para o final do arquivo
            file_size = upload_file.tell()  # Pega o tamanho
            upload_file.seek(0)  # Volta para o in√≠cio
            print(f"üìè Tamanho do arquivo: {file_size / 1024 / 1024:.2f}MB")
            
            if file_size > 5 * 1024 * 1024:
                print(f"‚ùå Arquivo muito grande: {file_size / 1024 / 1024:.2f}MB")
                return jsonify({
                    'success': False,
                    'message': f'Arquivo muito grande. Tamanho: {file_size / 1024 / 1024:.2f}MB. M√°ximo: 5MB'
                }), 400
                
        except Exception as validation_error:
            print(f"‚ùå Erro na valida√ß√£o do arquivo: {str(validation_error)}")
            return jsonify({
                'success': False,
                'message': f'Erro na valida√ß√£o do arquivo: {str(validation_error)}'
            }), 400
        
        # Determina o Content-Type baseado na extens√£o
        content_type_map = {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg', 
            'png': 'image/png'
        }
        content_type = content_type_map.get(file_ext, 'image/jpeg')
        
        try:
            print("üîß Iniciando configura√ß√£o S3...")
            # Configura√ß√£o S3
            import boto3
            s3_client = boto3.client(
                's3',
                aws_access_key_id='AKIAXH7FCUIUMZ7NFM5Q',
                aws_secret_access_key='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',
                region_name='us-east-1'
            )
            print("‚úÖ Cliente S3 configurado com sucesso")
            
            bucket_name = 'docmidia-files'
            
            # Define o caminho S3 baseado no tipo de m√≠dia
            if tipo_midia == 'WEB':
                s3_key = f"backup_studioclipagemco/public_html/fmanager/clipagem/web/arquivo{noticia_id}_1.jpeg"
            else:  # JORNAL
                s3_key = f"backup_studioclipagemco/public_html/fmanager/clipagem/jornal/arquivo{noticia_id}_1.jpeg"
            
            print(f"üì§ Fazendo upload para S3:")
            print(f"   - Bucket: {bucket_name}")
            print(f"   - Key: {s3_key}")
            print(f"   - Content-Type: {content_type}")
            print(f"   - Posi√ß√£o do arquivo: {upload_file.tell()}")
            
            # Upload para S3
            s3_client.upload_fileobj(
                upload_file,
                bucket_name,
                s3_key,
                ExtraArgs={
                    'ContentType': content_type
                }
            )
            
            print(f"‚úÖ Upload conclu√≠do: {s3_key}")
            
            return jsonify({
                'success': True,
                'message': 'Imagem enviada com sucesso para o S3',
                's3_path': s3_key,
                'noticia_id': noticia_id,
                'tipo_midia': tipo_midia
            })
            
        except Exception as upload_error:
            print(f"‚ùå Erro no upload S3: {str(upload_error)}")
            print(f"‚ùå Tipo do erro: {type(upload_error).__name__}")
            import traceback
            traceback.print_exc()
            return jsonify({
                'success': False,
                'message': f'Erro ao enviar imagem para S3: {str(upload_error)}'
            }), 500
    
    except Exception as e:
        print(f"üí• Erro no upload: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }), 500

@app.route('/aplicar_tags_lote', methods=['POST'])
@login_required
def aplicar_tags_lote():
    """Aplica tags a m√∫ltiplas not√≠cias de uma vez"""
    try:
        print("üè∑Ô∏è Iniciando aplica√ß√£o de tags em lote...")
        
        # Extrai dados do JSON
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'message': 'Dados n√£o fornecidos'
            }), 400
        
        noticias_ids = data.get('noticias_ids', [])
        tags_aplicar = data.get('tags', '').strip()
        acao = data.get('acao', 'adicionar')  # 'adicionar', 'substituir', 'remover'
        
        print(f"üìã IDs das not√≠cias: {noticias_ids}")
        print(f"üè∑Ô∏è Tags a aplicar: {tags_aplicar}")
        print(f"üéØ A√ß√£o: {acao}")
        
        # Valida√ß√µes
        if not noticias_ids:
            return jsonify({
                'success': False,
                'message': 'Nenhuma not√≠cia selecionada'
            }), 400
        
        if not tags_aplicar and acao != 'remover':
            return jsonify({
                'success': False,
                'message': 'Tags n√£o fornecidas'
            }), 400
        
        # Aplica as tags
        db = DatabaseManager()
        resultado = db.aplicar_tags_lote(noticias_ids, tags_aplicar, acao)
        db.disconnect()
        
        if resultado['success']:
            print(f"‚úÖ Tags aplicadas com sucesso a {resultado['noticias_atualizadas']} not√≠cias")
            return jsonify(resultado)
        else:
            print(f"‚ùå Erro ao aplicar tags: {resultado['message']}")
            return jsonify(resultado), 400
            
    except Exception as e:
        print(f"üí• Erro na aplica√ß√£o de tags em lote: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }), 500

@app.route('/gerar_relatorio_impresso', methods=['POST'])
@login_required
def gerar_relatorio_impresso():
    """Gera relat√≥rio PDF espec√≠fico para not√≠cias impressas com imagens do S3"""
    try:
        print("üéØ Iniciando gera√ß√£o de relat√≥rio de impressos...")
        
        # Extrai dados do formul√°rio
        data = request.get_json()
        cliente_id = data.get('cliente_id')
        data_inicio = data.get('data_inicio')
        data_fim = data.get('data_fim')
        ids_impresso = data.get('ids_impresso', [])
        
        print(f"üìä Par√¢metros: Cliente={cliente_id}, In√≠cio={data_inicio}, Fim={data_fim}")
        print(f"üìã IDs das not√≠cias impressas: {ids_impresso}")
        
        # Valida√ß√µes
        if not cliente_id or not data_inicio or not data_fim:
            print("‚ùå Campos obrigat√≥rios faltando")
            return jsonify({
                'success': False,
                'message': 'Campos obrigat√≥rios n√£o preenchidos (cliente, data in√≠cio, data fim)'
            }), 400
        
        if not ids_impresso:
            print("‚ùå Nenhuma not√≠cia impressa selecionada")
            return jsonify({
                'success': False,
                'message': 'Nenhuma not√≠cia impressa selecionada'
            }), 400
        
        try:
            cliente_id = int(cliente_id)
            ids_impresso = [int(id_) for id_ in ids_impresso if id_]
        except ValueError:
            print("‚ùå IDs inv√°lidos")
            return jsonify({
                'success': False,
                'message': 'IDs inv√°lidos fornecidos'
            }), 400
        
        # Verifica se o cliente existe e busca dados
        db = DatabaseManager()
        if not db.check_cliente(cliente_id):
            db.disconnect()
            print("‚ùå Cliente n√£o encontrado")
            return jsonify({
                'success': False,
                'message': 'Cliente n√£o encontrado'
            }), 404
        
        # Busca nome do cliente
        clientes = db.get_clientes()
        cliente_nome = "Cliente"
        for cliente in clientes:
            if cliente['id'] == cliente_id:
                cliente_nome = cliente['nome']
                break
        
        # Busca not√≠cias impressas pelos IDs
        noticias_impressas = []
        for noticia_id in ids_impresso:
            noticia = db.get_noticia_by_id(noticia_id, 'impresso')
            if noticia:
                noticias_impressas.append(noticia)
        
        db.disconnect()
        
        if not noticias_impressas:
            print("‚ùå Nenhuma not√≠cia impressa encontrada")
            return jsonify({
                'success': False,
                'message': 'Nenhuma not√≠cia impressa encontrada com os IDs fornecidos'
            }), 404
        
        print(f"‚úÖ Encontradas {len(noticias_impressas)} not√≠cias impressas")
        
        # Gera nome do arquivo
        data_inicio_clean = data_inicio.replace('-', '')
        data_fim_clean = data_fim.replace('-', '')
        nome_arquivo = f"relatorio_impresso_{cliente_id}_{data_inicio_clean}_{data_fim_clean}.pdf"
        caminho_arquivo = os.path.join('./output', nome_arquivo)
        
        print(f"üìÅ Nome do arquivo: {nome_arquivo}")
        
        # Gera o relat√≥rio usando o novo gerador
        from pdf_generator_impresso import PDFGeneratorImpresso
        
        print(f"üîß [DEBUG] Iniciando gera√ß√£o do PDF com {len(noticias_impressas)} not√≠cias...")
        for i, noticia in enumerate(noticias_impressas):
            print(f"üîß [DEBUG] Not√≠cia {i+1}: ID={noticia.get('id')}, T√≠tulo='{noticia.get('titulo', '')[:50]}...'")
        
        generator = PDFGeneratorImpresso()
        sucesso = generator.generate_impresso_report(
            noticias_impressas,
            cliente_nome,
            data_inicio,
            data_fim,
            caminho_arquivo
        )
        
        if sucesso and os.path.exists(caminho_arquivo):
            print("‚úÖ Relat√≥rio de impressos gerado com sucesso!")
            print(f"üìÑ Arquivo salvo: {caminho_arquivo}")
            print(f"üìè Tamanho do arquivo: {os.path.getsize(caminho_arquivo)} bytes")
            
            # Retorna o arquivo para download
            response = send_file(caminho_arquivo, as_attachment=True, 
                               download_name=nome_arquivo)
            
            # Define cookie para indicar que o download foi conclu√≠do
            import uuid
            download_token = str(uuid.uuid4())
            response.set_cookie('download_token', download_token, max_age=60)
            response.set_cookie('download_status', 'complete', max_age=60)
            
            return response
        else:
            print("‚ùå Erro ao gerar relat√≥rio de impressos")
            print(f"üîß [DEBUG] Sucesso: {sucesso}")
            print(f"üîß [DEBUG] Arquivo existe: {os.path.exists(caminho_arquivo) if 'caminho_arquivo' in locals() else 'N/A'}")
            return jsonify({
                'success': False,
                'message': 'Erro ao gerar o relat√≥rio PDF. Verifique os logs para mais detalhes.'
            }), 500
            
    except Exception as e:
        print(f"üí• Erro na gera√ß√£o do relat√≥rio de impressos: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }), 500

@app.route('/gerar_relatorio_web', methods=['POST'])
@login_required
def gerar_relatorio_web():
    """Gera relat√≥rio PDF espec√≠fico para not√≠cias web com imagens do S3"""
    try:
        print("üåê Iniciando gera√ß√£o de relat√≥rio web...")
        
        # Extrai dados do formul√°rio
        data = request.get_json()
        cliente_id = data.get('cliente_id')
        data_inicio = data.get('data_inicio')
        data_fim = data.get('data_fim')
        ids_web = data.get('ids_web', [])
        
        print(f"üìä Par√¢metros: Cliente={cliente_id}, In√≠cio={data_inicio}, Fim={data_fim}")
        print(f"üìã IDs das not√≠cias web: {ids_web}")
        
        # Valida√ß√µes
        if not cliente_id or not data_inicio or not data_fim:
            print("‚ùå Campos obrigat√≥rios faltando")
            return jsonify({
                'success': False,
                'message': 'Campos obrigat√≥rios n√£o preenchidos (cliente, data in√≠cio, data fim)'
            }), 400
        
        if not ids_web:
            print("‚ùå Nenhuma not√≠cia web selecionada")
            return jsonify({
                'success': False,
                'message': 'Nenhuma not√≠cia web selecionada'
            }), 400
        
        try:
            cliente_id = int(cliente_id)
            ids_web = [int(id_) for id_ in ids_web if id_]
        except ValueError:
            print("‚ùå IDs inv√°lidos")
            return jsonify({
                'success': False,
                'message': 'IDs inv√°lidos fornecidos'
            }), 400
        
        # Verifica se o cliente existe e busca dados
        db = DatabaseManager()
        if not db.check_cliente(cliente_id):
            db.disconnect()
            print("‚ùå Cliente n√£o encontrado")
            return jsonify({
                'success': False,
                'message': 'Cliente n√£o encontrado'
            }), 404
        
        # Busca nome do cliente
        clientes = db.get_clientes()
        cliente_nome = "Cliente"
        for cliente in clientes:
            if cliente['id'] == cliente_id:
                cliente_nome = cliente['nome']
                break
        
        # Busca not√≠cias web pelos IDs
        noticias_web = []
        for noticia_id in ids_web:
            noticia = db.get_noticia_by_id(noticia_id, 'web')
            if noticia:
                noticias_web.append(noticia)
        
        db.disconnect()
        
        if not noticias_web:
            print("‚ùå Nenhuma not√≠cia web encontrada")
            return jsonify({
                'success': False,
                'message': 'Nenhuma not√≠cia web encontrada com os IDs fornecidos'
            }), 404
        
        print(f"‚úÖ Encontradas {len(noticias_web)} not√≠cias web")
        
        # Gera nome do arquivo
        data_inicio_clean = data_inicio.replace('-', '')
        data_fim_clean = data_fim.replace('-', '')
        nome_arquivo = f"relatorio_web_{cliente_id}_{data_inicio_clean}_{data_fim_clean}.pdf"
        caminho_arquivo = os.path.join('./output', nome_arquivo)
        
        print(f"üìÅ Nome do arquivo: {nome_arquivo}")
        
        # Gera o relat√≥rio usando o novo gerador
        from pdf_generator_web import PDFGeneratorWeb
        
        generator = PDFGeneratorWeb()
        sucesso = generator.generate_web_report(
            noticias_web,
            cliente_nome,
            data_inicio,
            data_fim,
            caminho_arquivo
        )
        
        if sucesso and os.path.exists(caminho_arquivo):
            print("‚úÖ Relat√≥rio web gerado com sucesso!")
            
            # Retorna o arquivo para download
            response = send_file(caminho_arquivo, as_attachment=True, 
                               download_name=nome_arquivo)
            
            # Define cookie para indicar que o download foi conclu√≠do
            import uuid
            download_token = str(uuid.uuid4())
            response.set_cookie('download_token', download_token, max_age=60)
            response.set_cookie('download_status', 'complete', max_age=60)
            
            return response
        else:
            print("‚ùå Erro ao gerar relat√≥rio web")
            return jsonify({
                'success': False,
                'message': 'Erro ao gerar o relat√≥rio PDF'
            }), 500
            
    except Exception as e:
        print(f"üí• Erro na gera√ß√£o do relat√≥rio web: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }), 500

@app.route('/vincular_noticia_area', methods=['POST'])
@login_required
def vincular_noticia_area():
    """Vincula uma not√≠cia a uma √°rea espec√≠fica"""
    try:
        print("üéØ Iniciando vincula√ß√£o de not√≠cia √† √°rea...")
        
        # Obt√©m dados do JSON
        dados = request.get_json()
        if not dados:
            return jsonify({
                'success': False,
                'message': 'Dados JSON n√£o fornecidos'
            }), 400
        
        noticia_id = dados.get('noticia_id')
        tipo_midia = dados.get('tipo_midia')
        area_id = dados.get('area_id')  # Pode ser None para remover √°rea
        
        print(f"üìä Par√¢metros: noticia_id={noticia_id}, tipo={tipo_midia}, area_id={area_id}")
        
        # Valida√ß√µes
        if not noticia_id or not tipo_midia:
            return jsonify({
                'success': False,
                'message': 'noticia_id e tipo_midia s√£o obrigat√≥rios'
            }), 400
        
        if tipo_midia not in ['web', 'tv', 'radio', 'impresso']:
            return jsonify({
                'success': False,
                'message': 'tipo_midia deve ser web, tv, radio ou impresso'
            }), 400
        
        try:
            noticia_id = int(noticia_id)
            if area_id is not None:
                area_id = int(area_id)
        except ValueError:
            return jsonify({
                'success': False,
                'message': 'IDs devem ser n√∫meros v√°lidos'
            }), 400
        
        # Conecta ao banco
        db = DatabaseManager()
        
        # Busca a not√≠cia para verificar se existe
        noticia = db.get_noticia_by_id(noticia_id, tipo_midia)
        if not noticia:
            db.disconnect()
            return jsonify({
                'success': False,
                'message': 'Not√≠cia n√£o encontrada'
            }), 404
        
        # Atualiza a √°rea da not√≠cia
        sucesso = db.vincular_noticia_area(noticia_id, tipo_midia, area_id)
        
        if sucesso:
            # Busca a not√≠cia atualizada para retornar
            noticia_atualizada = db.get_noticia_by_id(noticia_id, tipo_midia)
            db.disconnect()
            
            area_texto = f"√°rea ID {area_id}" if area_id else "nenhuma √°rea"
            print(f"‚úÖ Not√≠cia {noticia_id} vinculada √† {area_texto}")
            
            return jsonify({
                'success': True,
                'message': f'Not√≠cia vinculada √† {area_texto} com sucesso',
                'noticia': noticia_atualizada
            })
        else:
            db.disconnect()
            return jsonify({
                'success': False,
                'message': 'Erro ao vincular not√≠cia √† √°rea'
            }), 500
            
    except Exception as e:
        print(f"üí• Erro na vincula√ß√£o: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        }), 500

@app.route('/imagem/<tipo>/<int:noticia_id>', methods=['GET', 'HEAD'])
@login_required
def servir_imagem(tipo, noticia_id):
    """Serve imagens do S3 com base no tipo e ID da not√≠cia - com retry para m√∫ltiplas extens√µes"""
    print(f"üñºÔ∏è [DEBUG] Solicita√ß√£o de imagem: {tipo} ID {noticia_id}")
    try:
        # Valida o tipo
        if tipo not in ['web', 'impresso']:
            print(f"‚ùå [DEBUG] Tipo inv√°lido: {tipo}")
            return jsonify({'error': 'Tipo inv√°lido'}), 400
        
        # Importa configura√ß√µes do S3
        from config_s3 import (
            try_multiple_extensions_local, try_multiple_extensions_s3,
            get_image_content_type, S3_BUCKET_NAME, S3_REGION,
            USE_LOCAL_IMAGES_FOR_DEVELOPMENT, PRESIGNED_URL_EXPIRATION,
            AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY
        )
        
        # Tenta primeiro o arquivo local para desenvolvimento
        if USE_LOCAL_IMAGES_FOR_DEVELOPMENT:
            print(f"üîç [DEBUG] Modo desenvolvimento ativo - verificando arquivos locais")
            local_path, extension = try_multiple_extensions_local(tipo, noticia_id)
            
            if local_path and extension:
                print(f"‚úÖ [DEBUG] Arquivo local encontrado: {local_path}")
                content_type = get_image_content_type(extension)
                return send_file(local_path, mimetype=content_type)
            else:
                print(f"‚ùå [DEBUG] Nenhum arquivo local encontrado para todas as extens√µes")
        else:
            print(f"‚ö†Ô∏è [DEBUG] Modo desenvolvimento desabilitado, pulando verifica√ß√£o local")
        
        # Se n√£o encontrar localmente, tenta no S3 com m√∫ltiplas extens√µes
        try:
            import boto3
            from botocore.exceptions import ClientError, NoCredentialsError
            
            s3_client = boto3.client(
                's3',
                aws_access_key_id=AWS_ACCESS_KEY_ID,
                aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
                region_name=S3_REGION
            )
            
            print(f"üîç [DEBUG] Tentando m√∫ltiplas extens√µes no S3...")
            s3_key, extension = try_multiple_extensions_s3(tipo, noticia_id, s3_client)
            
            if s3_key and extension:
                print(f"‚úÖ [DEBUG] Imagem encontrada no S3: {s3_key}")
                
                # Se existe, gera uma URL pr√©-assinada para a imagem
                url = s3_client.generate_presigned_url(
                    'get_object',
                    Params={'Bucket': S3_BUCKET_NAME, 'Key': s3_key},
                    ExpiresIn=PRESIGNED_URL_EXPIRATION
                )
                print(f"üîó [DEBUG] URL pr√©-assinada gerada: {url[:100]}...")
                
                # Para requisi√ß√µes HEAD, retorna 200 sem redirect
                from flask import request
                if request.method == 'HEAD':
                    print(f"üë§ [DEBUG] Requisi√ß√£o HEAD - retornando 200")
                    response = app.response_class(status=200)
                    response.headers['Content-Type'] = get_image_content_type(extension)
                    return response
                
                # Para GET, redireciona para a URL do S3
                from flask import redirect
                return redirect(url)
            else:
                # Nenhuma imagem encontrada em nenhuma extens√£o
                print(f"‚ùå [DEBUG] Nenhuma imagem encontrada no S3 para todas as extens√µes")
                return jsonify({'error': 'Imagem n√£o encontrada'}), 404
                    
        except NoCredentialsError:
            print("‚ö†Ô∏è Credenciais AWS n√£o configuradas. Usando apenas arquivos locais.")
            return jsonify({'error': 'Imagem n√£o encontrada'}), 404
        except Exception as s3_error:
            print(f"‚ö†Ô∏è Erro ao acessar S3: {str(s3_error)}")
            return jsonify({'error': 'Imagem n√£o encontrada'}), 404
            
    except Exception as e:
        print(f"Erro ao servir imagem: {str(e)}")
        return jsonify({'error': 'Erro interno do servidor'}), 500

@app.route('/validar_integridade', methods=['GET', 'POST'])
@login_required
def validar_integridade():
    """Valida a integridade da tabela noticia_cliente"""
    try:
        print("üîç Iniciando valida√ß√£o de integridade...")
        
        # Extrai cliente_id se fornecido
        cliente_id = None
        if request.method == 'POST':
            cliente_id = request.form.get('cliente_id')
            if cliente_id:
                try:
                    cliente_id = int(cliente_id)
                except ValueError:
                    cliente_id = None
        
        # Executa valida√ß√£o
        db = DatabaseManager()
        relatorio = db.validar_integridade_noticia_cliente(cliente_id)
        db.disconnect()
        
        print("‚úÖ Valida√ß√£o de integridade conclu√≠da")
        
        return jsonify({
            'success': True,
            'message': 'Valida√ß√£o de integridade conclu√≠da',
            'relatorio': relatorio
        })
        
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o de integridade: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro na valida√ß√£o: {str(e)}'
        }), 500

if __name__ == '__main__':
    # Cria diret√≥rio de output se n√£o existir
    os.makedirs('./output', exist_ok=True)
    
    # Inicia o servidor Flask
    app.run(debug=True, host='0.0.0.0', port=5050) 