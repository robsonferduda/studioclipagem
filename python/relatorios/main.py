#!/usr/bin/env python3
"""
Sistema de Gera√ß√£o de Relat√≥rios de M√≠dia

Este sistema conecta ao banco de dados MySQL, extrai dados de not√≠cias e valores por m√≠dia,
gera gr√°ficos e produz um relat√≥rio PDF completo com clipagens detalhadas.

Autor: Sistema de Relat√≥rios
Data: 2025
"""

from datetime import datetime
import os
import argparse
import pandas as pd
from database import DatabaseManager
from pdf_generator import PDFGenerator
from chart_generator import ChartGenerator

def generate_report(usuario_id: int, data_inicio: str, data_fim: str, output_dir: str = "./output", filtros: dict = None):
    """
    Gera relat√≥rio PDF com dados de m√≠dia filtrados por usu√°rio e per√≠odo
    
    Args:
        usuario_id (int): ID do usu√°rio para filtrar os dados
        data_inicio (str): Data de in√≠cio no formato 'YYYY-MM-DD'
        data_fim (str): Data de fim no formato 'YYYY-MM-DD'
        output_dir (str): Diret√≥rio onde salvar o relat√≥rio
        filtros (dict): Filtros opcionais para aplicar aos dados
        
    Returns:
        str: Caminho do arquivo PDF gerado
        
    Exemplo:
        generate_report(
            usuario_id=123,
            data_inicio='2024-01-01', 
            data_fim='2024-01-31',
            filtros={'tipos_midia': ['web', 'tv'], 'status': ['positivo']}
        )
    """
    
    print("üöÄ Iniciando gera√ß√£o do relat√≥rio completo...")
    print(f"üìä Usu√°rio: {usuario_id}")
    print(f"üìÖ Per√≠odo: {data_inicio} a {data_fim}")
    
    try:
        # 1. Conecta ao banco e busca dados
        print("\n1Ô∏è‚É£ Conectando ao banco de dados...")
        db = DatabaseManager()
        
        print("2Ô∏è‚É£ Buscando dados de not√≠cias...")
        noticias_data = db.get_noticias_por_midia(usuario_id, data_inicio, data_fim, filtros)
        print(f"   ‚úÖ {len(noticias_data)} registros de not√≠cias encontrados")
        
        print("3Ô∏è‚É£ Buscando dados de valores...")
        valores_data = db.get_valores_por_midia(usuario_id, data_inicio, data_fim, filtros)
        print(f"   ‚úÖ {len(valores_data)} registros de valores encontrados")
        
        print("4Ô∏è‚É£ Buscando clipagens detalhadas...")
        clipagens_data = db.get_clipagens_detalhadas(usuario_id, data_inicio, data_fim, filtros=filtros)
        total_clipagens = sum(len(lista) for lista in clipagens_data.values())
        print(f"   ‚úÖ {total_clipagens} clipagens detalhadas encontradas")
        
        # 2. Gera gr√°ficos individuais para cada se√ß√£o
        print("\n5Ô∏è‚É£ Gerando gr√°ficos individuais...")
        chart_generator = ChartGenerator()
        
        # Converte dados para DataFrames (corrigido)
        noticias_df = pd.DataFrame(noticias_data)
        if not noticias_df.empty:
            noticias_df = noticias_df.rename(columns={'midia': 'M√≠dia', 'quantidade': 'Qtd.'})
        
        valores_df = pd.DataFrame(valores_data)
        if not valores_df.empty:
            valores_df = valores_df.rename(columns={'midia': 'M√≠dia', 'valor': 'Valor (R$)'})
        
        # Gr√°fico para se√ß√£o de not√≠cias
        noticias_chart_buffer = chart_generator.create_pie_chart(
            noticias_df, "Distribui√ß√£o por M√≠dia", "Qtd."
        )
        
        # Gr√°fico para se√ß√£o de valores
        valores_chart_buffer = chart_generator.create_pie_chart(
            valores_df, "Valores por M√≠dia", "Valor (R$)"
        )
        
        print("   ‚úÖ Gr√°ficos individuais gerados com sucesso")
        
        # 3. Cria diret√≥rio de output se n√£o existir
        os.makedirs(output_dir, exist_ok=True)
        
        # 4. Define nome do arquivo
        data_inicio_clean = data_inicio.replace('-', '')
        data_fim_clean = data_fim.replace('-', '')
        filename = f"relatorio_{usuario_id}_{data_inicio_clean}_{data_fim_clean}.pdf"
        output_path = os.path.join(output_dir, filename)
        
        # Converte clipagens para DataFrame com novos campos
        all_clipagens = []
        for midia, lista_clipagens in clipagens_data.items():
            for clipagem in lista_clipagens:
                if midia in ['TV', 'R√°dio']:
                    # Novo formato unificado para TV e R√°dio: linha1, linha2_arquivo, linha3_sinopse
                    all_clipagens.append({
                        'M√≠dia': midia,
                        'Data': clipagem['data'],
                        'Linha1 Data Programa Emissora': clipagem['linha1_data_programa_emissora'],
                        'Linha2 Arquivo': clipagem['linha2_arquivo'],
                        'Linha3 Sinopse': clipagem['linha3_sinopse'],
                        'Tempo': clipagem['tempo'],
                        'Segundos': clipagem.get('segundos', 0),
                        'Valor': clipagem['valor']
                    })
                else:
                    # Formato existente para outras m√≠dias (Impresso e Web)
                    all_clipagens.append({
                        'M√≠dia': midia,
                        'Data': clipagem['data'],
                        'Linha1 Data Programa Emissora': '',
                        'Linha2 Arquivo': '',  # Sempre vazio para Web e Impresso
                        'Linha3 Sinopse': clipagem.get('sinopse', ''),
                        'Tempo': '',
                        'Segundos': 0,
                        'T√≠tulo Linha 1': clipagem.get('titulo_linha1', ''),
                        'T√≠tulo Linha 2': clipagem.get('titulo_linha2', ''),
                        'Valor': clipagem['valor']
                    })
        
        clipagens_df = pd.DataFrame(all_clipagens) if all_clipagens else pd.DataFrame()

        # 5. Gera PDF com layout moderno e clipagens detalhadas
        print("6Ô∏è‚É£ Gerando relat√≥rio PDF completo...")
        pdf_generator = PDFGenerator()
        pdf_generator.generate_report(
            noticias_data=noticias_df,
            valores_data=valores_df,
            charts_buffer=None,  # N√£o usado no novo layout
            usuario_id=usuario_id,
            data_inicio=data_inicio,
            data_fim=data_fim,
            output_path=output_path,
            noticias_chart_buffer=noticias_chart_buffer,
            valores_chart_buffer=valores_chart_buffer,
            clipagens_data=clipagens_df,  # Novo par√¢metro convertido para DataFrame
            database_manager=db,  # Adicionado para as se√ß√µes de retorno
            filtros=filtros  # Adicionado para aplicar filtros em todas as se√ß√µes
        )
        
        # 6. Limpa recursos
        db.disconnect()
        
        print(f"\nüéâ Relat√≥rio completo gerado com sucesso!")
        print(f"üìÅ Arquivo: {output_path}")
        
        # Estat√≠sticas do relat√≥rio
        print(f"\nüìä Estat√≠sticas do relat√≥rio:")
        total_noticias = sum(item['quantidade'] for item in noticias_data)
        total_valor = sum(item['valor'] for item in valores_data)
        print(f"   üìà Total de not√≠cias: {total_noticias:,}")
        print(f"   üí∞ Valor total: R$ {total_valor:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.'))
        print(f"   üì∞ Clipagens detalhadas: {total_clipagens}")
        print(f"   üìÑ Se√ß√µes inclu√≠das: Resumo + 4 listagens de m√≠dia")
        
        return output_path
        
    except Exception as e:
        print(f"\n‚ùå Erro ao gerar relat√≥rio: {e}")
        raise

def main():
    """Fun√ß√£o principal que gera o relat√≥rio PDF"""
    
    # Configura√ß√£o do parser de argumentos
    parser = argparse.ArgumentParser(description='Gerador de Relat√≥rios de M√≠dia')
    parser.add_argument('--cliente', type=int, required=True, help='ID do cliente')
    parser.add_argument('--data_inicio', type=str, required=True, help='Data in√≠cio (YYYY-MM-DD)')
    parser.add_argument('--data_fim', type=str, required=True, help='Data fim (YYYY-MM-DD)')
    parser.add_argument('--output', type=str, required=True, help='Nome do arquivo PDF de sa√≠da')
    parser.add_argument('--filtros', type=str, default='{}', help='Filtros em formato JSON')
    
    args = parser.parse_args()
    
    # Processa filtros JSON
    import json
    try:
        filtros = json.loads(args.filtros) if args.filtros != '{}' else None
    except json.JSONDecodeError:
        print("‚ùå Erro ao decodificar filtros JSON")
        filtros = None
    
    print("=" * 70)
    print("üè¢ SISTEMA DE RELAT√ìRIOS DE M√çDIA - VERS√ÉO COMPLETA")
    print("üìã Inclui: Resumo + Clipagens Detalhadas por M√≠dia")
    print("=" * 70)
    
    print("\nüöÄ Iniciando gera√ß√£o do relat√≥rio completo...")
    print(f"üìä Usu√°rio: {args.cliente}")
    print(f"üìÖ Per√≠odo: {args.data_inicio} a {args.data_fim}")
    
    # Instancia o gerenciador de banco de dados
    db = DatabaseManager()
    
    print("\n1Ô∏è‚É£ Conectando ao banco de dados...")
    
    # Verifica se o cliente existe
    if not db.check_cliente(args.cliente):
        print("\n‚ùå N√£o √© poss√≠vel gerar o relat√≥rio: cliente n√£o encontrado")
        return
    
    print("\n2Ô∏è‚É£ Buscando dados de not√≠cias...")
    noticias_data = db.get_noticias_por_midia(args.cliente, args.data_inicio, args.data_fim, filtros)
    
    print("\n3Ô∏è‚É£ Buscando dados de valores...")
    valores_data = db.get_valores_por_midia(args.cliente, args.data_inicio, args.data_fim, filtros)
    
    print("\n4Ô∏è‚É£ Buscando clipagens detalhadas...")
    clipagens_data = db.get_clipagens_detalhadas(args.cliente, args.data_inicio, args.data_fim, filtros=filtros)
    
    # Gera gr√°ficos individuais
    print("\n5Ô∏è‚É£ Gerando gr√°ficos individuais...")
    chart_gen = ChartGenerator()
    
    # Gr√°fico de not√≠cias
    noticias_df = pd.DataFrame(noticias_data)
    noticias_chart_buffer = chart_gen.create_pie_chart(noticias_df, "Not√≠cias por M√≠dia", "quantidade", label_column="midia")
    
    # Gr√°fico de valores
    valores_df = pd.DataFrame(valores_data)
    valores_chart_buffer = chart_gen.create_pie_chart(valores_df, "Valores por M√≠dia", "valor", label_column="midia")
    
    # Gr√°fico geral (combinado)
    charts_buffer = chart_gen.create_combined_charts(noticias_df, valores_df)
    print("   ‚úÖ Gr√°ficos individuais gerados com sucesso")
    
    # Gera o PDF
    print("\n6Ô∏è‚É£ Gerando relat√≥rio PDF completo...")
    pdf_gen = PDFGenerator()
    
    # Cria diret√≥rio de sa√≠da se n√£o existir
    output_dir = "./output"
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    
    # Define nome do arquivo de sa√≠da
    output_filename = f"relatorio_{args.cliente}_{args.data_inicio.replace('-','')}_{args.data_fim.replace('-','')}.pdf"
    output_path = os.path.join(output_dir, output_filename)
    
    # Gera o relat√≥rio
    pdf_gen.generate_report(
        noticias_data=pd.DataFrame(noticias_data),
        valores_data=pd.DataFrame(valores_data),
        charts_buffer=charts_buffer,
        usuario_id=args.cliente,
        data_inicio=args.data_inicio,
        data_fim=args.data_fim,
        output_path=output_path,
        noticias_chart_buffer=noticias_chart_buffer,
        valores_chart_buffer=valores_chart_buffer,
        clipagens_data=clipagens_data,
        database_manager=db,  # Adicionado para as se√ß√µes de retorno
        filtros=filtros  # Adicionado para aplicar filtros em todas as se√ß√µes
    )
    
    # Desconecta do banco
    db.disconnect()
    print("üîå Desconectado do banco")
    
    # Imprime resumo
    print("\nüéâ Relat√≥rio completo gerado com sucesso!")
    print(f"üìÅ Arquivo: {output_path}")
    
    total_noticias = sum(item['quantidade'] for item in noticias_data)
    total_valor = sum(item['valor'] for item in valores_data)
    total_clipagens = sum(len(clipagens) for clipagens in clipagens_data.values())
    
    print("\nüìä Estat√≠sticas do relat√≥rio:")
    print(f"   üìà Total de not√≠cias: {total_noticias}")
    print(f"   üí∞ Valor total: R$ {total_valor:,.2f}")
    print(f"   üì∞ Clipagens detalhadas: {total_clipagens}")
    print(f"   üìÑ Se√ß√µes inclu√≠das: Resumo + 4 listagens de m√≠dia")
    
    print("\n‚úÖ Processo conclu√≠do!")
    print(f"üìÑ Relat√≥rio dispon√≠vel em: {output_path}")
    
    print("\nüîç O relat√≥rio inclui:")
    print("   ‚Ä¢ P√°gina 1: Resumo com gr√°ficos")
    print("   ‚Ä¢ P√°gina 2+: Clipagens detalhadas por m√≠dia")
    print("     - Clipagens de M√≠dia TV")
    print("     - Clipagens de M√≠dia R√°dio")
    print("     - Clipagens de M√≠dia Impressa")
    print("     - Clipagens de M√≠dia Web")
    print("   ‚Ä¢ P√°ginas intermedi√°rias: Relat√≥rios de an√°lise")
    print("     - Relat√≥rio por ve√≠culos - TV")
    print("     - Relat√≥rio por programas - TV")
    print("     - Relat√≥rio por ve√≠culos - R√°dio")
    print("     - Relat√≥rio por programas - R√°dio")
    print("   ‚Ä¢ P√°ginas finais: Retornos por m√≠dia")
    print("     - Retornos de M√≠dia TV")
    print("     - Retornos de M√≠dia R√°dio")
    print("     - Retornos de M√≠dia Web")
    print("     - Retornos de M√≠dia Impressa")

if __name__ == "__main__":
    main() 