import os
import tempfile
import requests
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, KeepTogether, PageBreak
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from datetime import datetime
import locale
from PIL import Image as PILImage
import io

# Configura√ß√£o de locale para formata√ß√£o brasileira
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, 'Portuguese_Brazil.1252')
    except:
        pass

class PDFGeneratorWeb:
    def __init__(self):
        """Inicializa o gerador de PDF para web"""
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
        self._setup_s3_config()
        
    def _setup_custom_styles(self):
        """Configura estilos personalizados para o PDF"""
        # Estilo do t√≠tulo principal
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Title'],
            fontSize=22,
            spaceAfter=30,
            textColor=colors.HexColor('#2c3e50'),
            alignment=TA_CENTER
        )
        
        # Estilo do subt√≠tulo
        self.subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=self.styles['Heading1'],
            fontSize=16,
            textColor=colors.HexColor('#34495e'),
            spaceAfter=20,
            alignment=TA_CENTER
        )
        
        # Estilo do t√≠tulo da not√≠cia
        self.noticia_title_style = ParagraphStyle(
            'NoticiaTitle',
            parent=self.styles['Heading2'],
            fontSize=14,
            textColor=colors.HexColor('#2c3e50'),
            spaceAfter=8,
            spaceBefore=20,
            alignment=TA_LEFT,
            fontName='Helvetica-Bold'
        )
        
        # Estilo do ve√≠culo e valor
        self.veiculo_valor_style = ParagraphStyle(
            'VeiculoValor',
            parent=self.styles['Normal'],
            fontSize=12,
            textColor=colors.HexColor('#7f8c8d'),
            spaceAfter=8,
            alignment=TA_LEFT,
            fontName='Helvetica-Bold'
        )
        
        # Estilo do link
        self.link_style = ParagraphStyle(
            'Link',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=colors.HexColor('#3498db'),
            spaceAfter=8,
            alignment=TA_LEFT,
            fontName='Helvetica'
        )
        
        # Estilo da descri√ß√£o
        self.descricao_style = ParagraphStyle(
            'Descricao',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=colors.HexColor('#2c3e50'),
            spaceAfter=8,
            alignment=TA_LEFT,
            fontName='Helvetica'
        )
        
        # Estilo da data
        self.data_style = ParagraphStyle(
            'Data',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=colors.HexColor('#95a5a6'),
            spaceAfter=15,
            alignment=TA_LEFT,
            fontName='Helvetica-Oblique'
        )
    
    def _setup_s3_config(self):
        """Configura as informa√ß√µes do S3"""
        self.s3_bucket = 'docmidia-files'
        self.s3_base_url = 'https://docmidia-files.s3.amazonaws.com'
        self.screenshot_path = 'screenshot'
    
    def _download_image_from_s3(self, noticia_id):
        """
        Baixa a imagem do S3 para uma not√≠cia espec√≠fica (web)
        
        Args:
            noticia_id: ID da not√≠cia
            
        Returns:
            tuple: (caminho_arquivo_temporario, sucesso)
        """
        try:
            if not noticia_id:
                print(f"‚ùå ID da not√≠cia n√£o informado")
                return None, False
            
            print(f"üîç Tentando baixar screenshot do S3 para not√≠cia ID: {noticia_id}")
            
            # Constr√≥i a URL da imagem no S3
            s3_url = f"{self.s3_base_url}/{self.screenshot_path}/screenshot_noticia_{noticia_id}.jpg"
            print(f"üîó URL do S3: {s3_url}")
            
            # Cria arquivo tempor√°rio
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.jpg')
            temp_file.close()  # Fecha o arquivo para permitir escrita
            
            print(f"üîÑ Fazendo download da imagem...")
            
            # Baixa a imagem via HTTP
            response = requests.get(s3_url, timeout=30, stream=True)
            
            if response.status_code == 200:
                # Salva a imagem no arquivo tempor√°rio
                with open(temp_file.name, 'wb') as f:
                    for chunk in response.iter_content(chunk_size=8192):
                        f.write(chunk)
                
                # Verifica se o arquivo foi baixado com sucesso
                if os.path.exists(temp_file.name) and os.path.getsize(temp_file.name) > 0:
                    print(f"‚úÖ Screenshot baixado com sucesso do S3: {temp_file.name} ({os.path.getsize(temp_file.name)} bytes)")
                    return temp_file.name, True
                else:
                    print(f"‚ùå Arquivo baixado est√° vazio: {temp_file.name}")
                    try:
                        os.unlink(temp_file.name)
                    except:
                        pass
                    return None, False
            
            elif response.status_code == 404:
                print(f"‚ùå Screenshot n√£o encontrado no S3 (404): {s3_url}")
                try:
                    os.unlink(temp_file.name)
                except:
                    pass
                return None, False
            
            else:
                print(f"‚ùå Erro HTTP {response.status_code} ao acessar S3: {s3_url}")
                try:
                    os.unlink(temp_file.name)
                except:
                    pass
                return None, False
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro de requisi√ß√£o ao S3: {str(e)}")
            return None, False
        except Exception as e:
            print(f"‚ùå Erro ao baixar screenshot do S3 para not√≠cia {noticia_id}: {str(e)}")
            # Remove o arquivo tempor√°rio em caso de erro
            try:
                if 'temp_file' in locals() and hasattr(temp_file, 'name'):
                    os.unlink(temp_file.name)
            except:
                pass
            return None, False
    
    def _resize_image_for_pdf(self, image_path, max_width=4*inch, max_height=3*inch):
        """
        Redimensiona a imagem para caber no PDF
        
        Args:
            image_path: Caminho da imagem
            max_width: Largura m√°xima
            max_height: Altura m√°xima
            
        Returns:
            tuple: (largura, altura) ou None se erro
        """
        try:
            with PILImage.open(image_path) as img:
                width, height = img.size
                
                # Calcula propor√ß√£o
                ratio = min(max_width / width, max_height / height)
                
                new_width = width * ratio
                new_height = height * ratio
                
                return new_width, new_height
                
        except Exception as e:
            print(f"‚ùå Erro ao redimensionar imagem: {str(e)}")
            return max_width, max_height
    
    def _format_currency(self, value):
        """Formata valor monet√°rio em reais"""
        if value is None:
            return "R$ 0,00"
        try:
            return f"R$ {float(value):,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
        except:
            return "R$ 0,00"
    
    def _format_date(self, date_value):
        """Formata data para exibi√ß√£o"""
        if date_value is None:
            return ""
        try:
            if isinstance(date_value, str):
                # Tenta diferentes formatos
                for fmt in ['%Y-%m-%d', '%d/%m/%Y', '%Y-%m-%d %H:%M:%S']:
                    try:
                        date_obj = datetime.strptime(date_value, fmt)
                        return date_obj.strftime('%d/%m/%Y')
                    except:
                        continue
                return date_value
            else:
                return date_value.strftime('%d/%m/%Y')
        except:
            return str(date_value)
    
    def _clean_text(self, text):
        """Remove HTML e caracteres especiais do texto"""
        if not text:
            return ""
        
        # Remove HTML b√°sico
        import re
        text = re.sub(r'<[^>]*>', '', str(text))
        
        # Remove caracteres especiais
        text = text.replace('&nbsp;', ' ')
        text = text.replace('&amp;', '&')
        text = text.replace('&lt;', '<')
        text = text.replace('&gt;', '>')
        text = text.replace('&quot;', '"')
        
        return text.strip()
    
    def generate_web_report(self, noticias_data, cliente_nome, data_inicio, data_fim, output_path):
        """
        Gera relat√≥rio PDF espec√≠fico para not√≠cias web com screenshots do S3
        
        Args:
            noticias_data: Lista de not√≠cias web
            cliente_nome: Nome do cliente
            data_inicio: Data de in√≠cio do per√≠odo
            data_fim: Data de fim do per√≠odo
            output_path: Caminho para salvar o PDF
        """
        try:
            print(f"üåê Iniciando gera√ß√£o do relat√≥rio web...")
            print(f"üìä Total de not√≠cias: {len(noticias_data)}")
            print(f"üìÅ Caminho de sa√≠da: {output_path}")
            print(f"üë§ Cliente: {cliente_nome}")
            print(f"üìÖ Per√≠odo: {data_inicio} a {data_fim}")
            
            # Cria o documento PDF
            print(f"üìÑ Criando documento PDF...")
            doc = SimpleDocTemplate(
                output_path,
                pagesize=A4,
                rightMargin=inch,
                leftMargin=inch,
                topMargin=inch,
                bottomMargin=inch
            )
            
            # Lista de elementos do PDF
            elements = []
            
            # Arquivos tempor√°rios para limpeza posterior
            temp_files = []
            
            print(f"‚úÖ Estrutura do PDF inicializada")
            
            # Processa cada not√≠cia
            for i, noticia in enumerate(noticias_data, 1):
                try:
                    print(f"üì∞ Processando not√≠cia {i}/{len(noticias_data)}: ID {noticia.get('id', 'N/A')}")
                    
                    # T√≠tulo da not√≠cia
                    titulo = self._clean_text(noticia.get('titulo', 'Sem t√≠tulo'))
                    elements.append(Paragraph(f"{titulo}", self.noticia_title_style))
                    
                    # Ve√≠culo e valor
                    veiculo = noticia.get('veiculo', 'Ve√≠culo n√£o informado')
                    veiculo_valor_text = f"{veiculo}"
                    elements.append(Paragraph(veiculo_valor_text, self.veiculo_valor_style))
                    
                    # Link da not√≠cia (espec√≠fico para web)
                    link = noticia.get('link', '')
                    if link:
                        # Limita o link se for muito longo
                        if len(link) > 80:
                            link_display = link[:80] + "..."
                        else:
                            link_display = link
                        elements.append(Paragraph(f"Link: {link_display}", self.link_style))
                    
                    # Descri√ß√£o
                    descricao = self._clean_text(noticia.get('descricao', 'Sem descri√ß√£o'))
                    if descricao:
                        # Limita a descri√ß√£o a 500 caracteres
                        if len(descricao) > 500:
                            descricao = descricao[:500] + "..."
                        elements.append(Paragraph(descricao, self.descricao_style))
                    
                    # Data
                    data_noticia = self._format_date(noticia.get('data_publicacao', ''))
                    if data_noticia:
                        elements.append(Paragraph(f"Data: {data_noticia}", self.data_style))
                    
                    # Tenta baixar e adicionar screenshot do S3
                    noticia_id = noticia.get('id')
                    if noticia_id:
                        try:
                            print(f"üîÑ Tentando baixar screenshot para not√≠cia ID {noticia_id}...")
                            image_path, success = self._download_image_from_s3(noticia_id)

                            if success and image_path:
                                try:
                                    print(f"‚úÖ Imagem baixada, processando dimens√µes...")
                                    # Calcula largura m√°xima da p√°gina (descontando margens)
                                    page_width = A4[0] - 2 * inch  # Largura da p√°gina menos margens esquerda e direita
                                    
                                    # Obt√©m dimens√µes originais da imagem
                                    with PILImage.open(image_path) as pil_img:
                                        original_width, original_height = pil_img.size
                                        print(f"üìè Dimens√µes originais: {original_width}x{original_height}")
                                    
                                    # Valida√ß√£o para evitar divis√£o por zero e valores inv√°lidos
                                    if original_width <= 0 or original_height <= 0:
                                        print(f"‚ùå Dimens√µes inv√°lidas da imagem: {original_width}x{original_height}")
                                        elements.append(Paragraph("‚ùå Imagem com dimens√µes inv√°lidas", self.data_style))
                                    else:
                                        # Define altura m√°xima fixa para garantir que a imagem caiba na mesma p√°gina que o texto
                                        # Esta altura foi calculada para deixar espa√ßo para o texto e garantir que n√£o quebre a p√°gina
                                        MAX_IMAGE_HEIGHT = 6.5 * inch  # Altura m√°xima conservadora
                                        MAX_IMAGE_WIDTH = page_width    # Largura m√°xima √© a largura da p√°gina
                                        
                                        print(f"üìè Limites m√°ximos: {MAX_IMAGE_WIDTH:.2f}x{MAX_IMAGE_HEIGHT:.2f}")
                                        
                                        # Calcula propor√ß√£o da imagem
                                        aspect_ratio = original_width / original_height
                                        
                                        # Come√ßar com a altura m√°xima e calcular a largura proporcional
                                        new_height = min(MAX_IMAGE_HEIGHT, original_height)  # N√£o aumenta imagens pequenas
                                        new_width = new_height * aspect_ratio
                                        
                                        # Se a largura calculada excede o m√°ximo, ajusta pela largura
                                        if new_width > MAX_IMAGE_WIDTH:
                                            print(f"‚ö†Ô∏è  Largura calculada ({new_width:.2f}) excede m√°ximo, ajustando...")
                                            new_width = MAX_IMAGE_WIDTH
                                            new_height = new_width / aspect_ratio
                                            
                                            # Garante que mesmo ap√≥s ajuste pela largura, a altura n√£o exceda o m√°ximo
                                            if new_height > MAX_IMAGE_HEIGHT:
                                                print(f"‚ö†Ô∏è  Altura ainda excede m√°ximo ap√≥s ajuste, for√ßando altura m√°xima...")
                                                new_height = MAX_IMAGE_HEIGHT
                                                new_width = new_height * aspect_ratio
                                        
                                        print(f"üìê Dimens√µes finais: {new_width:.2f}x{new_height:.2f}")
                                        print(f"‚úÖ Imagem ser√° exibida com altura m√°xima de {MAX_IMAGE_HEIGHT/inch:.1f} inches")
                                        
                                        # Adiciona imagem ao PDF com dimens√µes controladas
                                        img = Image(image_path, width=new_width, height=new_height)
                                        elements.append(img)
                                        print(f"‚úÖ Imagem adicionada ao PDF com sucesso")
                                    
                                    # Adiciona arquivo √† lista de limpeza
                                    temp_files.append(image_path)
                                    
                                except Exception as e:
                                    print(f"‚ùå Erro ao processar screenshot para not√≠cia {noticia_id}: {str(e)}")
                                    import traceback
                                    traceback.print_exc()
                                    # Adiciona mensagem de erro no lugar da imagem
                                    elements.append(Paragraph("‚ùå Screenshot n√£o dispon√≠vel", self.data_style))
                            else:
                                # Adiciona mensagem quando n√£o h√° screenshot
                                elements.append(Paragraph("üì∑ Screenshot n√£o encontrado no S3", self.data_style))
                        except Exception as e:
                            print(f"‚ùå Erro geral ao processar screenshot para not√≠cia {noticia_id}: {str(e)}")
                            import traceback
                            traceback.print_exc()
                            elements.append(Paragraph("‚ùå Erro ao processar screenshot", self.data_style))
                    
                    elements.append(Spacer(1, 20))
                    
                    # For√ßa uma nova p√°gina para cada not√≠cia (exceto a √∫ltima)
                    if i < len(noticias_data):
                        print(f"üìÑ Adicionando quebra de p√°gina ap√≥s not√≠cia {i}")
                        elements.append(PageBreak())
                
                except Exception as e:
                    print(f"‚ùå Erro ao processar not√≠cia {i} (ID: {noticia.get('id', 'N/A')}): {str(e)}")
                    import traceback
                    traceback.print_exc()
                    # Adiciona uma not√≠cia de erro para n√£o interromper o processamento
                    elements.append(Paragraph(f"‚ùå Erro ao processar not√≠cia {i}", self.data_style))
                    elements.append(Spacer(1, 20))
                    # Tamb√©m adiciona quebra de p√°gina ap√≥s erro (exceto na √∫ltima)
                    if i < len(noticias_data):
                        elements.append(PageBreak())
                    continue
                
            
            # Gera o PDF
            print(f"üìÑ Gerando arquivo PDF com {len(elements)} elementos...")
            try:
                doc.build(elements)
                print("‚úÖ PDF constru√≠do com sucesso")
            except Exception as e:
                print(f"‚ùå Erro ao construir o PDF: {str(e)}")
                import traceback
                traceback.print_exc()
                raise e
            
            # Verifica se o arquivo foi criado
            if os.path.exists(output_path):
                file_size = os.path.getsize(output_path)
                print(f"‚úÖ Arquivo PDF criado: {output_path} ({file_size} bytes)")
            else:
                print(f"‚ùå Arquivo PDF n√£o foi criado: {output_path}")
                raise Exception("Arquivo PDF n√£o foi gerado")
            
            # Limpa arquivos tempor√°rios
            print(f"üßπ Limpando {len(temp_files)} arquivos tempor√°rios...")
            #for temp_file in temp_files:
                #try:
                    #os.unlink(temp_file)
                    #print(f"üóëÔ∏è  Removido: {temp_file}")
                #except Exception as e:
                    #print(f"‚ö†Ô∏è  Erro ao remover {temp_file}: {str(e)}")
            
            print(f"‚úÖ Relat√≥rio web gerado com sucesso: {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar relat√≥rio web: {str(e)}")
            import traceback
            traceback.print_exc()
            return False 