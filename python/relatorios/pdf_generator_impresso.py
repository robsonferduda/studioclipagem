import os
import tempfile
import paramiko
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, KeepTogether, PageBreak
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from datetime import datetime
import locale
from PIL import Image as PILImage
import io

# Configura√ß√£o de locale para formata√ß√£o brasileira
try:
    locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')
except:
    try:
        locale.setlocale(locale.LC_ALL, 'Portuguese_Brazil.1252')
    except:
        pass

class PDFGeneratorImpresso:
    def __init__(self):
        """Inicializa o gerador de PDF para impressos"""
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
        self._setup_ssh_config()
        
    def _setup_custom_styles(self):
        """Configura estilos personalizados para o PDF"""
        # Estilo do t√≠tulo principal
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Title'],
            fontSize=22,
            spaceAfter=30,
            textColor=colors.HexColor('#2c3e50'),
            alignment=TA_CENTER
        )
        
        # Estilo do subt√≠tulo
        self.subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=self.styles['Heading1'],
            fontSize=16,
            textColor=colors.HexColor('#34495e'),
            spaceAfter=20,
            alignment=TA_CENTER
        )
        
        # Estilo do t√≠tulo da not√≠cia
        self.noticia_title_style = ParagraphStyle(
            'NoticiaTitle',
            parent=self.styles['Heading2'],
            fontSize=14,
            textColor=colors.HexColor('#2c3e50'),
            spaceAfter=8,
            spaceBefore=20,
            alignment=TA_LEFT,
            fontName='Helvetica-Bold'
        )
        
        # Estilo do ve√≠culo e valor
        self.veiculo_valor_style = ParagraphStyle(
            'VeiculoValor',
            parent=self.styles['Normal'],
            fontSize=12,
            textColor=colors.HexColor('#7f8c8d'),
            spaceAfter=8,
            alignment=TA_LEFT,
            fontName='Helvetica-Bold'
        )
        
        # Estilo da descri√ß√£o
        self.descricao_style = ParagraphStyle(
            'Descricao',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=colors.HexColor('#2c3e50'),
            spaceAfter=8,
            alignment=TA_LEFT,
            fontName='Helvetica'
        )
        
        # Estilo da data
        self.data_style = ParagraphStyle(
            'Data',
            parent=self.styles['Normal'],
            fontSize=10,
            textColor=colors.HexColor('#95a5a6'),
            spaceAfter=15,
            alignment=TA_LEFT,
            fontName='Helvetica-Oblique'
        )
    
    def _setup_ssh_config(self):
        """Configura as informa√ß√µes de conex√£o SSH"""
        self.ssh_host = 'ubuntu@ec2-54-91-187-59.compute-1.amazonaws.com'
        self.ssh_key_path = 'cadu.pem'
        self.remote_image_path = '/var/www/studioclipagem/public/img/noticia-impressa/'
    
    def _download_image_from_scp(self, ds_caminho_img):
        """
        Baixa a imagem do servidor via SSH/SCP usando paramiko para uma not√≠cia espec√≠fica (impressa)
        
        Args:
            ds_caminho_img: Nome do arquivo de imagem (ex: "35442173.jpg")
            
        Returns:
            tuple: (caminho_arquivo_temporario, sucesso)
        """
        ssh_client = None
        sftp_client = None
        
        try:
            if not ds_caminho_img or ds_caminho_img.strip() == '':
                print(f"‚ùå Nome do arquivo de imagem n√£o informado")
                return None, False
            
            print(f"üîç Tentando baixar imagem impressa via SSH/SCP: {ds_caminho_img}")
            
            # Constr√≥i o caminho completo no servidor remoto
            remote_file_path = f"{self.remote_image_path}{ds_caminho_img}"
            
            # Cria arquivo tempor√°rio com a extens√£o correta
            file_extension = os.path.splitext(ds_caminho_img)[1]
            temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=file_extension)
            temp_file.close()  # Fecha o arquivo para permitir escrita
            
            print(f"üîÑ Conectando via SSH: {self.ssh_host}")
            
            # Configura cliente SSH
            ssh_client = paramiko.SSHClient()
            ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # Conecta usando a chave privada
            private_key = paramiko.RSAKey.from_private_key_file(self.ssh_key_path)
            ssh_client.connect(
                hostname='ec2-54-91-187-59.compute-1.amazonaws.com',
                username='ubuntu',
                pkey=private_key,
                timeout=60,
                banner_timeout=60
            )
            
            print(f"‚úÖ Conectado via SSH")
            
            # Cria cliente SFTP
            sftp_client = ssh_client.open_sftp()
            
            print(f"üîÑ Baixando arquivo: {remote_file_path} -> {temp_file.name}")
            
            # Baixa o arquivo
            sftp_client.get(remote_file_path, temp_file.name)
            
            # Verifica se o arquivo foi baixado com sucesso
            if os.path.exists(temp_file.name) and os.path.getsize(temp_file.name) > 0:
                print(f"‚úÖ Imagem impressa baixada com sucesso via SSH/SCP: {temp_file.name} ({os.path.getsize(temp_file.name)} bytes)")
                return temp_file.name, True
            else:
                print(f"‚ùå Arquivo baixado est√° vazio ou n√£o existe: {temp_file.name}")
                # Remove o arquivo tempor√°rio vazio
                try:
                    os.unlink(temp_file.name)
                except:
                    pass
                return None, False
            
        except paramiko.AuthenticationException:
            print(f"‚ùå Erro de autentica√ß√£o SSH")
            return None, False
        except paramiko.SSHException as e:
            print(f"‚ùå Erro SSH: {str(e)}")
            return None, False
        except FileNotFoundError as e:
            print(f"‚ùå Arquivo n√£o encontrado no servidor: {remote_file_path}")
            return None, False
        except Exception as e:
            print(f"‚ùå Erro ao baixar imagem impressa via SSH/SCP para arquivo {ds_caminho_img}: {str(e)}")
            # Remove o arquivo tempor√°rio em caso de erro
            try:
                if 'temp_file' in locals() and hasattr(temp_file, 'name'):
                    os.unlink(temp_file.name)
            except:
                pass
            return None, False
        finally:
            # Fecha conex√µes
            try:
                if sftp_client:
                    sftp_client.close()
                if ssh_client:
                    ssh_client.close()
                print(f"üîí Conex√µes SSH fechadas")
            except:
                pass
    
    def _resize_image_for_pdf(self, image_path, max_width=4*inch, max_height=3*inch):
        """
        Redimensiona a imagem para caber no PDF
        
        Args:
            image_path: Caminho da imagem
            max_width: Largura m√°xima
            max_height: Altura m√°xima
            
        Returns:
            tuple: (largura, altura) ou None se erro
        """
        try:
            with PILImage.open(image_path) as img:
                width, height = img.size
                
                # Calcula propor√ß√£o
                ratio = min(max_width / width, max_height / height)
                
                new_width = width * ratio
                new_height = height * ratio
                
                return new_width, new_height
                
        except Exception as e:
            print(f"‚ùå Erro ao redimensionar imagem: {str(e)}")
            return max_width, max_height
    
    def _format_currency(self, value):
        """Formata valor monet√°rio em reais"""
        if value is None:
            return "R$ 0,00"
        try:
            return f"R$ {float(value):,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
        except:
            return "R$ 0,00"
    
    def _format_date(self, date_value):
        """Formata data para exibi√ß√£o"""
        if date_value is None:
            return ""
        try:
            if isinstance(date_value, str):
                # Tenta diferentes formatos
                for fmt in ['%Y-%m-%d', '%d/%m/%Y', '%Y-%m-%d %H:%M:%S']:
                    try:
                        date_obj = datetime.strptime(date_value, fmt)
                        return date_obj.strftime('%d/%m/%Y')
                    except:
                        continue
                return date_value
            else:
                return date_value.strftime('%d/%m/%Y')
        except:
            return str(date_value)
    
    def _clean_text(self, text):
        """Remove HTML e caracteres especiais do texto"""
        if not text:
            return ""
        
        # Remove HTML b√°sico
        import re
        text = re.sub(r'<[^>]*>', '', str(text))
        
        # Remove caracteres especiais
        text = text.replace('&nbsp;', ' ')
        text = text.replace('&amp;', '&')
        text = text.replace('&lt;', '<')
        text = text.replace('&gt;', '>')
        text = text.replace('&quot;', '"')
        
        return text.strip()
    
    def generate_impresso_report(self, noticias_data, cliente_nome, data_inicio, data_fim, output_path):
        """
        Gera relat√≥rio PDF espec√≠fico para not√≠cias impressas com imagens baixadas via SCP
        
        Args:
            noticias_data: Lista de not√≠cias impressas
            cliente_nome: Nome do cliente
            data_inicio: Data de in√≠cio do per√≠odo
            data_fim: Data de fim do per√≠odo
            output_path: Caminho para salvar o PDF
        """
        try:
            print(f"üéØ Iniciando gera√ß√£o do relat√≥rio de impressos...")
            print(f"üìä Total de not√≠cias: {len(noticias_data)}")
            print(f"üìÅ Caminho de sa√≠da: {output_path}")
            print(f"üë§ Cliente: {cliente_nome}")
            print(f"üìÖ Per√≠odo: {data_inicio} a {data_fim}")
            
            # Cria o documento PDF
            print(f"üìÑ Criando documento PDF...")
            doc = SimpleDocTemplate(
                output_path,
                pagesize=A4,
                rightMargin=inch,
                leftMargin=inch,
                topMargin=inch,
                bottomMargin=inch
            )
            
            # Lista de elementos do PDF
            elements = []
            
            # Arquivos tempor√°rios para limpeza posterior
            temp_files = []
            
            print(f"‚úÖ Estrutura do PDF inicializada")
            
            # Processa cada not√≠cia
            for i, noticia in enumerate(noticias_data, 1):
                try:
                    print(f"üì∞ Processando not√≠cia {i}/{len(noticias_data)}: ID {noticia.get('id', 'N/A')}")
                    
                    # T√≠tulo da not√≠cia
                    titulo = self._clean_text(noticia.get('titulo', 'Sem t√≠tulo'))
                    elements.append(Paragraph(f"{titulo}", self.noticia_title_style))
                    
                    # Ve√≠culo e valor
                    veiculo = noticia.get('veiculo', 'Ve√≠culo n√£o informado')
                    veiculo_valor_text = f"{veiculo}"
                    elements.append(Paragraph(veiculo_valor_text, self.veiculo_valor_style))
                    
                    # Descri√ß√£o
                    descricao = self._clean_text(noticia.get('texto', 'Sem descri√ß√£o'))
                    if descricao:
                        # Limita a descri√ß√£o a 500 caracteres
                        if len(descricao) > 500:
                            descricao = descricao[:500] + "..."
                        elements.append(Paragraph(descricao, self.descricao_style))
                    
                    # Data
                    data_noticia = self._format_date(noticia.get('data', ''))
                    if data_noticia:
                        elements.append(Paragraph(f"Data: {data_noticia}", self.data_style))
                    
                    # Tenta baixar e adicionar imagem via SCP
                    ds_caminho_img = noticia.get('ds_caminho_img')
                    if ds_caminho_img:
                        try:
                            print(f"üîÑ Tentando baixar imagem para not√≠cia {noticia.get('id')}: {ds_caminho_img}...")
                            #image_path, success = self._download_image_from_scp(ds_caminho_img) - Altera√ß√£o para usar caminho remoto
                            image_path, success = self.remote_image_path+ds_caminho_img, True
                            if success and image_path:
                                try:
                                    print(f"‚úÖ Imagem baixada, processando dimens√µes...")
                                    # Calcula largura m√°xima da p√°gina (descontando margens)
                                    page_width = A4[0] - 2 * inch  # Largura da p√°gina menos margens esquerda e direita
                                    
                                    # Obt√©m dimens√µes originais da imagem
                                    with PILImage.open(image_path) as pil_img:
                                        original_width, original_height = pil_img.size
                                        print(f"üìè Dimens√µes originais: {original_width}x{original_height}")
                                    
                                    # Valida√ß√£o para evitar divis√£o por zero e valores inv√°lidos
                                    if original_width <= 0 or original_height <= 0:
                                        print(f"‚ùå Dimens√µes inv√°lidas da imagem: {original_width}x{original_height}")
                                        elements.append(Paragraph("‚ùå Imagem com dimens√µes inv√°lidas", self.data_style))
                                    else:
                                        # Calcula dimens√µes para ocupar quase toda a p√°gina
                                        aspect_ratio = original_height / original_width
                                        
                                        # Largura: ocupar toda a largura da p√°gina
                                        max_width = page_width
                                        
                                        # Altura: p√°gina inteira menos espa√ßo para texto
                                        page_height = A4[1] - 2 * inch  # Altura da p√°gina menos margens (top/bottom)
                                        
                                        # Espa√ßo estimado para texto (t√≠tulo + ve√≠culo + descri√ß√£o + data + espa√ßamentos)
                                        # T√≠tulo: ~30px, Ve√≠culo: ~20px, Descri√ß√£o: ~60px, Data: ~15px, Espa√ßamentos: ~30px
                                        text_space = 2.5 * inch  # Espa√ßo reservado para textos e espa√ßamentos
                                        max_height = page_height - text_space
                                        
                                        print(f"üìè Espa√ßo dispon√≠vel: {max_width:.2f}x{max_height:.2f} (p√°gina: {page_height:.2f}, texto: {text_space:.2f})")
                                        
                                        # Tenta ocupar toda a largura primeiro
                                        new_width = page_width
                                        new_height = page_width * aspect_ratio
                                        
                                        print(f"üìê Tentativa 1 (largura total): {new_width:.2f}x{new_height:.2f}")
                                        
                                        # Se a altura for muito grande, ajusta pela altura m√°xima
                                        if new_height > max_height:
                                            print(f"‚ö†Ô∏è  Altura muito grande ({new_height:.2f}), ajustando para altura m√°xima ({max_height:.2f})")
                                            new_height = max_height
                                            new_width = max_height / aspect_ratio
                                            
                                            # Se a largura recalculada for maior que o permitido, mant√©m a largura m√°xima
                                            if new_width > max_width:
                                                print(f"‚ö†Ô∏è  Largura recalculada muito grande ({new_width:.2f}), mantendo largura m√°xima ({max_width:.2f})")
                                                new_width = max_width
                                                new_height = max_width * aspect_ratio
                                        
                                        print(f"üìê Dimens√µes finais: {new_width:.2f}x{new_height:.2f}")
                                        
                                        # Adiciona imagem ao PDF ocupando toda a largura
                                        img = Image(image_path, width=new_width, height=new_height)
                                        elements.append(img)
                                        print(f"‚úÖ Imagem adicionada ao PDF com sucesso")
                                    
                                    # Adiciona arquivo √† lista de limpeza
                                    temp_files.append(image_path)
                                    
                                except Exception as e:
                                    print(f"‚ùå Erro ao processar imagem {ds_caminho_img}: {str(e)}")
                                    import traceback
                                    traceback.print_exc()
                                    # Adiciona mensagem de erro no lugar da imagem
                                    elements.append(Paragraph("‚ùå Imagem n√£o dispon√≠vel", self.data_style))
                            else:
                                # Adiciona mensagem quando n√£o h√° imagem
                                elements.append(Paragraph("üì∑ Sem imagem", self.data_style))
                        except Exception as e:
                            print(f"‚ùå Erro geral ao processar imagem {ds_caminho_img}: {str(e)}")
                            import traceback
                            traceback.print_exc()
                            elements.append(Paragraph("‚ùå Erro ao processar imagem", self.data_style))
                    
                    elements.append(Spacer(1, 20))
                    
                    # For√ßa uma nova p√°gina para cada not√≠cia (exceto a √∫ltima)
                    if i < len(noticias_data):
                        print(f"üìÑ Adicionando quebra de p√°gina ap√≥s not√≠cia {i}")
                        elements.append(PageBreak())
                
                except Exception as e:
                    print(f"‚ùå Erro ao processar not√≠cia {i} (ID: {noticia.get('id', 'N/A')}): {str(e)}")
                    import traceback
                    traceback.print_exc()
                    # Adiciona uma not√≠cia de erro para n√£o interromper o processamento
                    elements.append(Paragraph(f"‚ùå Erro ao processar not√≠cia {i}", self.data_style))
                    elements.append(Spacer(1, 20))
                    # Tamb√©m adiciona quebra de p√°gina ap√≥s erro (exceto na √∫ltima)
                    if i < len(noticias_data):
                        elements.append(PageBreak())
                    continue
            
            # Gera o PDF
            print(f"üìÑ Gerando arquivo PDF com {len(elements)} elementos...")
            try:
                doc.build(elements)
                print("‚úÖ PDF constru√≠do com sucesso")
            except Exception as e:
                print(f"‚ùå Erro ao construir o PDF: {str(e)}")
                import traceback
                traceback.print_exc()
                raise e
            
            # Verifica se o arquivo foi criado
            if os.path.exists(output_path):
                file_size = os.path.getsize(output_path)
                print(f"‚úÖ Arquivo PDF criado: {output_path} ({file_size} bytes)")
            else:
                print(f"‚ùå Arquivo PDF n√£o foi criado: {output_path}")
                raise Exception("Arquivo PDF n√£o foi gerado")
                        
            print(f"‚úÖ Relat√≥rio de impressos gerado com sucesso: {output_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar relat√≥rio de impressos: {str(e)}")
            import traceback
            print("üîç Traceback completo:")
            traceback.print_exc()
            return False 